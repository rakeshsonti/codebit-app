[{"D:\\project\\codebit\\src\\index.js":"1","D:\\project\\codebit\\src\\App.js":"2","D:\\project\\codebit\\src\\reportWebVitals.js":"3","D:\\project\\codebit\\src\\components\\Login.js":"4","D:\\project\\codebit\\src\\components\\Signup.js":"5","D:\\project\\codebit\\src\\components\\DashBoard.js":"6","D:\\project\\codebit\\src\\components\\Compete.js":"7","D:\\project\\codebit\\src\\components\\Ask.js":"8","D:\\project\\codebit\\src\\components\\Home.js":"9","D:\\project\\codebit\\src\\components\\Logout.js":"10","D:\\project\\codebit\\src\\components\\NewPanel.js":"11","D:\\project\\codebit\\src\\components\\LeaderBoard.js":"12","D:\\project\\codebit\\src\\components\\Profile.js":"13","D:\\project\\codebit\\src\\components\\CodeEditor.js":"14","D:\\project\\codebit\\src\\components\\EditorItems.js":"15","D:\\project\\codebit\\src\\components\\Admin.js":"16","D:\\project\\codebit\\src\\components\\Explore.js":"17"},{"size":551,"mtime":1609335387991,"results":"18","hashOfConfig":"19"},{"size":3925,"mtime":1609561337677,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1963,"mtime":1609431277003,"results":"22","hashOfConfig":"19"},{"size":2424,"mtime":1609432345253,"results":"23","hashOfConfig":"19"},{"size":6514,"mtime":1609526957258,"results":"24","hashOfConfig":"19"},{"size":148,"mtime":1609335131833,"results":"25","hashOfConfig":"19"},{"size":129,"mtime":1609335483018,"results":"26","hashOfConfig":"19"},{"size":5220,"mtime":1609526977540,"results":"27","hashOfConfig":"19"},{"size":110,"mtime":1609337135245,"results":"28","hashOfConfig":"19"},{"size":14185,"mtime":1609515306163,"results":"29","hashOfConfig":"19"},{"size":125,"mtime":1609322538634,"results":"30","hashOfConfig":"19"},{"size":147,"mtime":1609337144530,"results":"31","hashOfConfig":"19"},{"size":2260,"mtime":1609409582421,"results":"32","hashOfConfig":"19"},{"size":1134,"mtime":1609396173812,"results":"33","hashOfConfig":"19"},{"size":8245,"mtime":1609522412191,"results":"34","hashOfConfig":"19"},{"size":355,"mtime":1609526960547,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"zxdbgk",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},"D:\\project\\codebit\\src\\index.js",[],["75","76"],"D:\\project\\codebit\\src\\App.js",["77"],"D:\\project\\codebit\\src\\reportWebVitals.js",[],"D:\\project\\codebit\\src\\components\\Login.js",["78"],"import React, { useState } from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\n\r\nimport styles from \"./Login.module.css\";\r\nconst Login = (props) => {\r\n   const [email, setEmail] = useState();\r\n   const [password, setPassword] = useState();\r\n   const onChangeEmail = (e) => {\r\n      setEmail(e.target.value);\r\n   };\r\n   const onChangePassword = (e) => {\r\n      setPassword(e.target.value);\r\n   };\r\n\r\n   const localHandler = (e) => {\r\n      e.preventDefault();\r\n      props.LoginHandler(email, password);\r\n   };\r\n   return (\r\n      <div className={styles.container}>\r\n         <Form className={styles.formBackground} onSubmit={localHandler}>\r\n            <FormGroup>\r\n               <Label for=\"Email\">Email</Label>\r\n               <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"emailId\"\r\n                  placeholder=\"Enter your Email\"\r\n                  onChange={onChangeEmail}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <Label for=\"Password\">Password</Label>\r\n               <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"examplePassword\"\r\n                  placeholder=\"Enter your password\"\r\n                  onChange={onChangePassword}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <p className={styles.error}>{props.error}</p>\r\n            </FormGroup>\r\n            <Button className={styles.button} type=\"submit\">\r\n               login\r\n            </Button>{\" \"}\r\n            <FormGroup className={styles.smallBtn}>\r\n               create an account?\r\n               <Button color=\"link\" size=\"sm\" onClick={props.showHandler}>\r\n                  sign up\r\n               </Button>\r\n            </FormGroup>\r\n         </Form>\r\n      </div>\r\n   );\r\n};\r\nexport default Login;\r\n","D:\\project\\codebit\\src\\components\\Signup.js",[],"D:\\project\\codebit\\src\\components\\DashBoard.js",["79"],"import React from \"react\";\r\nimport styles from \"./DashBoard.module.css\";\r\nimport {\r\n   Collapse,\r\n   NavbarToggler,\r\n   NavbarBrand,\r\n   Navbar,\r\n   Nav,\r\n   NavItem,\r\n   Button,\r\n} from \"reactstrap\";\r\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Compete from \"./Compete\";\r\nimport Ask from \"./Ask\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\nimport NewPanel from \"./NewPanel\";\r\nimport Profile from \"./Profile\";\r\nimport Logout from \"./Logout\";\r\nimport Admin from \"./Admin\";\r\nclass DashBoard extends React.Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         isOpen: false,\r\n      };\r\n      this.toggle = this.toggle.bind(this);\r\n   }\r\n   toggle = () => {\r\n      this.setState({\r\n         isOpen: !this.state.isOpen,\r\n      });\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div>\r\n            <Router>\r\n               <Navbar\r\n                  color=\"dark\"\r\n                  dark\r\n                  expand=\"sm\"\r\n                  className={styles.navbarstyle}\r\n               >\r\n                  <NavbarBrand href=\"/\">CodeBit</NavbarBrand>\r\n                  <NavbarToggler onClick={this.toggle} />\r\n                  <Collapse isOpen={this.state.isOpen} navbar>\r\n                     <Nav>\r\n                        <NavItem>\r\n                           <NavLink to=\"/\">\r\n                              <Button\r\n                                 outline\r\n                                 color=\"success\"\r\n                                 size=\"sm\"\r\n                                 className={styles.navitem}\r\n                              >\r\n                                 Practice\r\n                              </Button>\r\n                           </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                           <NavLink to=\"/compete\">\r\n                              <Button\r\n                                 outline\r\n                                 color=\"success\"\r\n                                 size=\"sm\"\r\n                                 className={styles.navitem}\r\n                              >\r\n                                 Compete\r\n                              </Button>\r\n                           </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                           <NavLink to=\"/leaderboard\">\r\n                              <Button\r\n                                 outline\r\n                                 color=\"success\"\r\n                                 size=\"sm\"\r\n                                 className={styles.navitem}\r\n                              >\r\n                                 Leaderboard\r\n                              </Button>\r\n                           </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                           <NavLink to=\"/newpanel\">\r\n                              <Button\r\n                                 outline\r\n                                 color=\"success\"\r\n                                 size=\"sm\"\r\n                                 className={styles.navitem}\r\n                              >\r\n                                 New Panel\r\n                              </Button>\r\n                           </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                           <NavLink to=\"/ask\">\r\n                              <Button\r\n                                 outline\r\n                                 color=\"warning\"\r\n                                 size=\"sm\"\r\n                                 className={styles.navitem}\r\n                              >\r\n                                 Ask ?\r\n                              </Button>\r\n                           </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                           <NavLink to=\"/profile\">\r\n                              <Button\r\n                                 outline\r\n                                 color=\"success\"\r\n                                 size=\"sm\"\r\n                                 className={styles.navitem}\r\n                              >\r\n                                 Profile\r\n                              </Button>\r\n                           </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                           {/* <NavLink to=\"/logout\"> */}\r\n                           <Button\r\n                              outline\r\n                              color=\"danger\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                              onClick={this.props.logoutHandler}\r\n                           >\r\n                              Log out\r\n                           </Button>\r\n                           {/* </NavLink> */}\r\n                        </NavItem>\r\n                        <NavItem>\r\n                           <NavLink to=\"/admin\">\r\n                              <Button\r\n                                 outline\r\n                                 color=\"success\"\r\n                                 size=\"sm\"\r\n                                 className={styles.navitem}\r\n                              >\r\n                                 Admin\r\n                              </Button>\r\n                           </NavLink>\r\n                        </NavItem>\r\n                     </Nav>\r\n                  </Collapse>\r\n               </Navbar>\r\n               {/* <Switch> */}\r\n               <Route exact path=\"/\">\r\n                  <Home />\r\n               </Route>\r\n               <Route exact path=\"/compete\">\r\n                  <Compete />\r\n               </Route>\r\n               <Route exact path=\"/leaderboard\">\r\n                  <LeaderBoard />\r\n               </Route>\r\n               <Route exact path=\"/newpanel\">\r\n                  <NewPanel />\r\n               </Route>\r\n               <Route exact path=\"/ask\">\r\n                  <Ask />\r\n               </Route>\r\n               <Route exact path=\"/profile\">\r\n                  <Profile />\r\n               </Route>\r\n               <Route exact path=\"/logout\">\r\n                  {/* <Logout /> */}\r\n               </Route>\r\n               <Route exact path=\"/admin\">\r\n                  <Admin />\r\n               </Route>\r\n               {/* </Switch> */}\r\n            </Router>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default DashBoard;\r\n","D:\\project\\codebit\\src\\components\\Compete.js",[],"D:\\project\\codebit\\src\\components\\Ask.js",[],"D:\\project\\codebit\\src\\components\\Home.js",[],"D:\\project\\codebit\\src\\components\\Logout.js",[],"D:\\project\\codebit\\src\\components\\NewPanel.js",["80","81"],"import React, { useState } from \"react\";\r\nimport styles from \"./NewPanel.module.css\";\r\nimport toggleImg from \"../images/toggle.PNG\";\r\nimport Editor from \"./CodeEditor\";\r\nimport editorItems from \"./EditorItems\";\r\nimport greenIcon from \"../images/greenright.PNG\";\r\nimport redIcon from \"../images/redcross.PNG\";\r\nimport {\r\n   Row,\r\n   Col,\r\n   Dropdown,\r\n   DropdownToggle,\r\n   DropdownMenu,\r\n   DropdownItem,\r\n   Button,\r\n} from \"reactstrap\";\r\nconst {\r\n   allLanguaue,\r\n   allEditor,\r\n   allLightTheme,\r\n   allDarkTheme,\r\n   fontList,\r\n   tabList,\r\n} = editorItems;\r\nconst NewPanel = () => {\r\n   const [userInput, setUserInput] = useState();\r\n   const [userOutput, setUserOutput] = useState(\"\");\r\n   const [testResult, setTestResult] = useState([true, false, true, false]);\r\n   const value = \"public static vois main(String args[]);\";\r\n   const [userCode, setUserCode] = useState(value);\r\n   const [font, setFont] = useState(10);\r\n   const [tab, setTab] = useState(4);\r\n   const [language, setLanguage] = useState(\"java\");\r\n   const [theme, setTheme] = useState(\"monokai\");\r\n   const [editor, setEditor] = useState(\"vscode\");\r\n   const [dropdownOpenFont, setDropdownOpenFont] = useState(false);\r\n   const toggleFont = () => setDropdownOpenFont((prevState) => !prevState);\r\n   const [dropdownOpenTab, setDropdownOpenTab] = useState(false);\r\n   const toggleTab = () => setDropdownOpenTab((prevState) => !prevState);\r\n   const [dropdownOpenLang, setDropdownOpenLang] = useState(false);\r\n   const toggleLang = () => setDropdownOpenLang((prevState) => !prevState);\r\n   const [dropdownOpenTheme, setDropdownOpenTheme] = useState(false);\r\n\r\n   const toggleTheme = () => setDropdownOpenTheme((prevState) => !prevState);\r\n   const [dropdownOpenEditor, setDropdownOpenEditor] = useState(false);\r\n\r\n   const toggleEditor = () => setDropdownOpenEditor((prevState) => !prevState);\r\n   const changeInput = (e) => {\r\n      // console.log(e.target.value);\r\n      setUserInput(e.target.value);\r\n      // setUserOutput(e.target.value);\r\n   };\r\n\r\n   const run = () => {\r\n      fetch(\"http://localhost:9999/run\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            sourceCode: userCode,\r\n            language: language,\r\n            input: userInput,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n      })\r\n         .then((r) => {\r\n            return r.JSON();\r\n            // console.log(r.JSON());\r\n            // setUserOutput(\"ram is great\\r\\n260\\r\\n\");\r\n         })\r\n         .then((r) => console.log(r))\r\n         .catch((e) => {\r\n            console.log(e);\r\n         });\r\n   };\r\n\r\n   // -------------------------------\r\n   // console.log(userCode);\r\n   const [toggleProblem, setToggleProblem] = useState(true);\r\n   const problemHead = \"Sum of Array Elements \";\r\n   const problem =\r\n      \"Given an integer array arr of size n, you need to sum the elements of arr.\";\r\n   const input1 = \"n = 3 \\n arr[] = {3 2 1}\";\r\n   const output1 = \"6\";\r\n   const input2 = \"n = 4 arr[] = {1 2 3 4}\";\r\n   const output2 = \"10\";\r\n   const task =\r\n      \"You need to complete the function sumElement() that takes arr and n and returns the sum. The printing is done by the driver code.\";\r\n   const constraints = \"1 <= n <= 103 1 <= arri <= 104\";\r\n   const timeComplexity = \"O(n)\";\r\n   const spaceComplexity = \"O(1)\";\r\n   const problemLevel = \"Easy\";\r\n   // const totalSubmission = 123;\r\n   const topicTag = \"array\";\r\n   const point = 12;\r\n   return (\r\n      <div className={styles.container}>\r\n         <div className={styles.toggle}>\r\n            <img\r\n               alt=\"toggle alt\"\r\n               className={styles.toggleImg}\r\n               onClick={() => {\r\n                  setToggleProblem(!toggleProblem);\r\n                  // setUserOutput(\"ram is great\\r\\n260\\r\\n\");\r\n               }}\r\n               src={toggleImg}\r\n            />\r\n         </div>\r\n         {toggleProblem ? (\r\n            <div className={styles.problemContainer}>\r\n               <div className={styles.body}>\r\n                  <h6 className={styles.proHead}>{problemHead}</h6>\r\n                  <div className={styles.row1}>\r\n                     <div>Level : -{problemLevel}</div>\r\n                     <div>Topic Tag : -{topicTag}</div>\r\n                     <div>Point: -{point}</div>\r\n                  </div>\r\n                  <hr className={styles.line} />\r\n                  <div className={styles.subcontainer}>\r\n                     <p>{problem}</p>\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 1</div>\r\n                        <div>{input1}</div>\r\n                        <div className={styles.h7}>Output 1</div>\r\n                        <div>{output1}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 2</div>\r\n                        <div>{input2}</div>\r\n                        <div className={styles.h7}>Output 2</div>\r\n                        <div>{output2}</div>\r\n                     </div>\r\n                     <button onClick={() => run()}>click</button>\r\n                     <br />\r\n                     <div className={styles.h7}>Your Task:</div>\r\n                     <div>{task}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Time Complexity:</div>\r\n                     <div>{timeComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Auxiliary Space:</div>\r\n                     <div> {spaceComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Constraints:</div>\r\n                     <div>{constraints}</div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         ) : (\r\n            <div></div>\r\n         )}\r\n         {/* ------------------------problem part is finished */}\r\n\r\n         <div className={styles.editorHead}>\r\n            <div style={{ color: \"white\" }}>........</div>\r\n            <Dropdown isOpen={dropdownOpenLang} toggle={toggleLang} size=\"sm\">\r\n               <DropdownToggle caret>{language}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allLanguaue.map((lang, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${lang}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setLanguage(lang);\r\n                           }}\r\n                        >\r\n                           {lang}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------------------editor type */}\r\n            <Dropdown isOpen={dropdownOpenTheme} toggle={toggleTheme} size=\"sm\">\r\n               <DropdownToggle caret>{theme}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.themeScroll}>\r\n                     <DropdownItem>Dark Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n\r\n                     {allDarkTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                     <DropdownItem divider />\r\n                     <DropdownItem>Light Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n                     {allLightTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -------editor type */}\r\n            <Dropdown\r\n               isOpen={dropdownOpenEditor}\r\n               toggle={toggleEditor}\r\n               size=\"sm\"\r\n            >\r\n               <DropdownToggle caret>{editor}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allEditor.map((editorValue, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${editorValue}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setEditor(editorValue);\r\n                           }}\r\n                        >\r\n                           {editorValue}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* ----------------------font */}\r\n            <Dropdown isOpen={dropdownOpenFont} toggle={toggleFont} size=\"sm\">\r\n               <DropdownToggle caret>{font}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.fontScroll}>\r\n                     {fontList.map((fontValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${fontValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setFont(fontValue);\r\n                              }}\r\n                           >\r\n                              {fontValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------tab */}\r\n            <Dropdown isOpen={dropdownOpenTab} toggle={toggleTab} size=\"sm\">\r\n               <DropdownToggle caret>{tab}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.tabScroll}>\r\n                     {tabList.map((tabValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${tabValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTab(tabValue);\r\n                              }}\r\n                           >\r\n                              {tabValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button size=\"sm\">reset</Button>\r\n\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button size=\"sm\">run</Button>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button size=\"sm\">submit</Button>\r\n         </div>\r\n\r\n         {/* main editor------------------------ */}\r\n         <div>\r\n            <Row className={styles.editorContainer}>\r\n               <Col lg={7} md={7}>\r\n                  <Editor\r\n                     className={styles.editor}\r\n                     value={userCode}\r\n                     tab={tab}\r\n                     language={language}\r\n                     theme={theme}\r\n                     editor={editor}\r\n                     font={font}\r\n                     onChange={setUserCode}\r\n                  />\r\n               </Col>\r\n               <Col lg={5} md={5} className={styles.consoleContainer}>\r\n                  <textarea\r\n                     className={styles.consoleOutput}\r\n                     value={userOutput}\r\n                     disabled\r\n                  >\r\n                     {userOutput}\r\n                  </textarea>\r\n                  <textarea\r\n                     className={styles.consoleInput}\r\n                     onChange={changeInput}\r\n                     value={userInput}\r\n                  ></textarea>\r\n                  <div className={styles.consoleTestcase}>\r\n                     {testResult.map((res, index) => {\r\n                        return (\r\n                           <div\r\n                              className={styles.testDiv}\r\n                              key={`${res}${index}`}\r\n                           >\r\n                              <h6>Test case {index + 1}</h6>\r\n                              {res ? (\r\n                                 <img\r\n                                    src={greenIcon}\r\n                                    alt=\"test img\"\r\n                                    className={styles.testimg}\r\n                                 ></img>\r\n                              ) : (\r\n                                 <img\r\n                                    src={redIcon}\r\n                                    alt=\"test img\"\r\n                                    className={styles.testimg}\r\n                                 ></img>\r\n                              )}\r\n                           </div>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\nexport default NewPanel;\r\n","D:\\project\\codebit\\src\\components\\LeaderBoard.js",[],"D:\\project\\codebit\\src\\components\\Profile.js",[],"D:\\project\\codebit\\src\\components\\CodeEditor.js",[],"D:\\project\\codebit\\src\\components\\EditorItems.js",[],"D:\\project\\codebit\\src\\components\\Admin.js",[],"D:\\project\\codebit\\src\\components\\Explore.js",["82","83","84","85"],"import React from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport styles from \"./Explore.module.css\";\r\nconst Explore = (props) => {\r\n   return (\r\n      <div className={styles.container}>\r\n         <Router></Router>\r\n      </div>\r\n   );\r\n};\r\nexport default Explore;\r\n",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":11,"column":11,"nodeType":"92","messageId":"93","endLine":11,"endColumn":19},{"ruleId":"90","severity":1,"message":"94","line":2,"column":49,"nodeType":"92","messageId":"93","endLine":2,"endColumn":57},{"ruleId":"90","severity":1,"message":"95","line":19,"column":8,"nodeType":"92","messageId":"93","endLine":19,"endColumn":14},{"ruleId":"90","severity":1,"message":"96","line":27,"column":23,"nodeType":"92","messageId":"93","endLine":27,"endColumn":36},{"ruleId":"90","severity":1,"message":"97","line":28,"column":23,"nodeType":"92","messageId":"93","endLine":28,"endColumn":36},{"ruleId":"90","severity":1,"message":"98","line":2,"column":10,"nodeType":"92","messageId":"93","endLine":2,"endColumn":16},{"ruleId":"90","severity":1,"message":"99","line":3,"column":35,"nodeType":"92","messageId":"93","endLine":3,"endColumn":41},{"ruleId":"90","severity":1,"message":"100","line":3,"column":43,"nodeType":"92","messageId":"93","endLine":3,"endColumn":48},{"ruleId":"90","severity":1,"message":"101","line":3,"column":50,"nodeType":"92","messageId":"93","endLine":3,"endColumn":54},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'userName' is assigned a value but never used.","Identifier","unusedVar","'FormText' is defined but never used.","'Logout' is defined but never used.","'setUserOutput' is assigned a value but never used.","'setTestResult' is assigned a value but never used.","'Button' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]