[{"D:\\project\\codebit\\src\\index.js":"1","D:\\project\\codebit\\src\\App.js":"2","D:\\project\\codebit\\src\\reportWebVitals.js":"3","D:\\project\\codebit\\src\\components\\Login.js":"4","D:\\project\\codebit\\src\\components\\Signup.js":"5","D:\\project\\codebit\\src\\components\\DashBoard.js":"6","D:\\project\\codebit\\src\\components\\Ask.js":"7","D:\\project\\codebit\\src\\components\\Home.js":"8","D:\\project\\codebit\\src\\components\\Logout.js":"9","D:\\project\\codebit\\src\\components\\NewPanel.js":"10","D:\\project\\codebit\\src\\components\\LeaderBoard.js":"11","D:\\project\\codebit\\src\\components\\Profile.js":"12","D:\\project\\codebit\\src\\components\\CodeEditor.js":"13","D:\\project\\codebit\\src\\components\\EditorItems.js":"14","D:\\project\\codebit\\src\\components\\Admin.js":"15","D:\\project\\codebit\\src\\components\\Explore.js":"16","D:\\project\\codebit\\src\\components\\SeperateEditor.js":"17"},{"size":551,"mtime":1609335387991,"results":"18","hashOfConfig":"19"},{"size":3945,"mtime":1609698456284,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1963,"mtime":1609431277003,"results":"22","hashOfConfig":"19"},{"size":2424,"mtime":1609432345253,"results":"23","hashOfConfig":"19"},{"size":7533,"mtime":1609751250884,"results":"24","hashOfConfig":"19"},{"size":12944,"mtime":1609843317082,"results":"25","hashOfConfig":"19"},{"size":6191,"mtime":1609613332039,"results":"26","hashOfConfig":"19"},{"size":110,"mtime":1609337135245,"results":"27","hashOfConfig":"19"},{"size":26405,"mtime":1609693479006,"results":"28","hashOfConfig":"19"},{"size":3791,"mtime":1609702297367,"results":"29","hashOfConfig":"19"},{"size":147,"mtime":1609337144530,"results":"30","hashOfConfig":"19"},{"size":2260,"mtime":1609409582421,"results":"31","hashOfConfig":"19"},{"size":1120,"mtime":1609651359033,"results":"32","hashOfConfig":"19"},{"size":10483,"mtime":1609685707353,"results":"33","hashOfConfig":"19"},{"size":2386,"mtime":1609690511420,"results":"34","hashOfConfig":"19"},{"size":9978,"mtime":1609689943341,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"zxdbgk",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"D:\\project\\codebit\\src\\index.js",[],["79","80"],"D:\\project\\codebit\\src\\App.js",["81"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport DashBoard from \"./components/DashBoard\";\nfunction App() {\n   const [isLoggIn, setLoggIn] = useState(false);\n   const [isSigninOrLogin, setIsSigninOrLogin] = useState(true);\n   const [loginError, setLoginError] = useState(undefined);\n   const [signupError, setSignupError] = useState(undefined);\n   const [userName, setUserName] = useState(undefined);\n   const getUserName = () => {\n      fetch(\"http://localhost:9999/userinfo\", { credentials: \"include\" })\n         .then((r) => {\n            if (r.ok) {\n               return r.json();\n            } else {\n               setLoggIn(false);\n               setUserName(undefined);\n               return {\n                  success: false,\n               };\n            }\n         })\n         .then((r) => {\n            if (r.success !== false) {\n               setLoggIn(true);\n               setUserName(r.email);\n            }\n         });\n   };\n   useEffect(() => {\n      getUserName();\n   }, []);\n   const LoginHandler = (email, password) => {\n      fetch(\"http://localhost:9999/login\", {\n         method: \"POST\",\n         body: JSON.stringify({ email, password }),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: \"include\",\n      })\n         .then((r) => {\n            //r.ok() is response between 200 to <300 then true otherwise if greater than 300 so false\n            if (r.ok) {\n               return {\n                  success: true,\n               };\n            } else {\n               return r.json();\n            }\n         })\n         .then((r) => {\n            if (r.success === true) {\n               setLoggIn(true);\n               setLoginError(\"\");\n               return getUserName();\n            } else {\n               // setLoggIn(false);\n               setLoginError(r.err);\n            }\n         })\n         .catch((e) => {\n            console.log(e);\n            setLoginError(\"internal error! try again\");\n         });\n   };\n   const showHandler = () => {\n      setIsSigninOrLogin(!isSigninOrLogin);\n   };\n   const SignupHandler = (name, email, password) => {\n      fetch(\"http://localhost:9999/signup\", {\n         method: \"POST\",\n         body: JSON.stringify({ email, password, name }),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: \"include\",\n      })\n         .then((r) => {\n            //r.ok() is response between 200 to <300 then true otherwise if greater than 300 so false\n            if (r.ok) {\n               return {\n                  success: true,\n               };\n            } else {\n               return r.json();\n            }\n         })\n         .then((r) => {\n            if (r.success === true) {\n               setSignupError(\"\");\n               setIsSigninOrLogin(true);\n            } else {\n               setSignupError(r.err);\n            }\n         })\n         .catch((e) => {\n            console.error(e);\n            setSignupError(e);\n         });\n   };\n   const logoutHandler = () => {\n      return fetch(\"http://localhost:9999/logout\", {\n         method: \"GET\",\n         credentials: \"include\",\n      }).then((r) => {\n         if (r.ok) {\n            setLoggIn(false);\n            setUserName(undefined);\n         }\n      });\n   };\n   return (\n      <div className=\"App\">\n         {isLoggIn ? (\n            <DashBoard logoutHandler={logoutHandler} />\n         ) : isSigninOrLogin ? (\n            <Login\n               LoginHandler={LoginHandler}\n               error={loginError}\n               showHandler={showHandler}\n            />\n         ) : (\n            <Signup\n               SignupHandler={SignupHandler}\n               error={signupError}\n               showHandler={showHandler}\n            />\n         )}\n      </div>\n   );\n}\n\nexport default App;\n","D:\\project\\codebit\\src\\reportWebVitals.js",[],"D:\\project\\codebit\\src\\components\\Login.js",["82"],"import React, { useState } from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\n\r\nimport styles from \"./Login.module.css\";\r\nconst Login = (props) => {\r\n   const [email, setEmail] = useState();\r\n   const [password, setPassword] = useState();\r\n   const onChangeEmail = (e) => {\r\n      setEmail(e.target.value);\r\n   };\r\n   const onChangePassword = (e) => {\r\n      setPassword(e.target.value);\r\n   };\r\n\r\n   const localHandler = (e) => {\r\n      e.preventDefault();\r\n      props.LoginHandler(email, password);\r\n   };\r\n   return (\r\n      <div className={styles.container}>\r\n         <Form className={styles.formBackground} onSubmit={localHandler}>\r\n            <FormGroup>\r\n               <Label for=\"Email\">Email</Label>\r\n               <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"emailId\"\r\n                  placeholder=\"Enter your Email\"\r\n                  onChange={onChangeEmail}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <Label for=\"Password\">Password</Label>\r\n               <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"examplePassword\"\r\n                  placeholder=\"Enter your password\"\r\n                  onChange={onChangePassword}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <p className={styles.error}>{props.error}</p>\r\n            </FormGroup>\r\n            <Button className={styles.button} type=\"submit\">\r\n               login\r\n            </Button>{\" \"}\r\n            <FormGroup className={styles.smallBtn}>\r\n               create an account?\r\n               <Button color=\"link\" size=\"sm\" onClick={props.showHandler}>\r\n                  sign up\r\n               </Button>\r\n            </FormGroup>\r\n         </Form>\r\n      </div>\r\n   );\r\n};\r\nexport default Login;\r\n","D:\\project\\codebit\\src\\components\\Signup.js",[],"D:\\project\\codebit\\src\\components\\DashBoard.js",["83","84"],"import React, { useState } from \"react\";\r\nimport styles from \"./DashBoard.module.css\";\r\nimport {\r\n   PersonBoundingBox,\r\n   Envelope,\r\n   Trophy,\r\n   Award,\r\n   Power,\r\n   PlusSquare,\r\n   QuestionCircle,\r\n} from \"react-bootstrap-icons\";\r\nimport {\r\n   Collapse,\r\n   NavbarToggler,\r\n   NavbarBrand,\r\n   Navbar,\r\n   Nav,\r\n   NavItem,\r\n   Button,\r\n   ButtonDropdown,\r\n   DropdownToggle,\r\n   DropdownMenu,\r\n   DropdownItem,\r\n} from \"reactstrap\";\r\nimport ProfileIcon from \"../images/code.PNG\";\r\nimport {\r\n   BrowserRouter as Router,\r\n   Route,\r\n   NavLink,\r\n   useHistory,\r\n} from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Ask from \"./Ask\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\nimport NewPanel from \"./NewPanel\";\r\nimport Profile from \"./Profile\";\r\nimport Explore from \"./Explore\";\r\nimport Admin from \"./Admin\";\r\nimport SeperateEditor from \"./SeperateEditor\";\r\nfunction DashBoard(props) {\r\n   const [isOpen, setIsOpen] = useState(false);\r\n   const toggle = () => {\r\n      setIsOpen(!isOpen);\r\n   };\r\n   const [dropdownOpenProfile, setOpenProfile] = useState(false);\r\n\r\n   const toggleProfile = () => setOpenProfile(!dropdownOpenProfile);\r\n\r\n   return (\r\n      <div>\r\n         <Router>\r\n            <Navbar\r\n               color=\"dark\"\r\n               dark\r\n               expand=\"sm\"\r\n               className={styles.navbarstyle}\r\n            >\r\n               <NavbarBrand href=\"/\">CodeBit</NavbarBrand>\r\n               <NavbarToggler onClick={toggle} />\r\n               <Collapse isOpen={isOpen} navbar>\r\n                  <Nav>\r\n                     <NavItem>\r\n                        <NavLink to=\"/\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Practice\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n\r\n                     <NavItem>\r\n                        <NavLink to=\"/leaderboard\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Leaderboard\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <NavLink to=\"/newpanel\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              <PlusSquare />\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <NavLink to=\"/ask\">\r\n                           <Button\r\n                              outline\r\n                              color=\"warning\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              <QuestionCircle />\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <NavLink to=\"/admin\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Admin\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        {/* <NavLink to=\"/profile\"> */}\r\n                        <img\r\n                           src={ProfileIcon}\r\n                           width=\"35px\"\r\n                           height=\"33px\"\r\n                           alt=\"profile icon\"\r\n                        ></img>\r\n                        <ButtonDropdown\r\n                           isOpen={dropdownOpenProfile}\r\n                           toggle={toggleProfile}\r\n                           size=\"sm\"\r\n                           className={styles.navitem}\r\n                           color=\"secondary\"\r\n                        >\r\n                           <DropdownToggle\r\n                              color=\"secondary\"\r\n                              size=\"sm\"\r\n                              color=\"success\"\r\n                              caret\r\n                           ></DropdownToggle>\r\n                           <DropdownMenu>\r\n                              <DropdownItem header className={styles.profileH1}>\r\n                                 <PersonBoundingBox /> Rambhajan Sonti\r\n                              </DropdownItem>\r\n                              <DropdownItem className={styles.profileH2}>\r\n                                 <Envelope /> ram@gmail.com\r\n                              </DropdownItem>\r\n                              <DropdownItem className={styles.profileH3}>\r\n                                 <Trophy /> score : 1234\r\n                              </DropdownItem>\r\n                              <DropdownItem divider />\r\n                              <DropdownItem className={styles.profileH4}>\r\n                                 <Award /> Rank : 34\r\n                              </DropdownItem>\r\n                           </DropdownMenu>\r\n                        </ButtonDropdown>\r\n                        {/* <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           ></Button> */}\r\n                        {/* </NavLink> */}\r\n                     </NavItem>\r\n\r\n                     <NavItem>\r\n                        <Button\r\n                           outline\r\n                           color=\"danger\"\r\n                           size=\"sm\"\r\n                           className={styles.navitem}\r\n                           onClick={props.logoutHandler}\r\n                        >\r\n                           <Power />\r\n                        </Button>\r\n                     </NavItem>\r\n                  </Nav>\r\n               </Collapse>\r\n            </Navbar>\r\n            {/* <Switch> */}\r\n            <Route exact path=\"/\">\r\n               <Home />\r\n            </Route>\r\n\r\n            <Route exact path=\"/leaderboard\">\r\n               <LeaderBoard />\r\n            </Route>\r\n            <Route exact path=\"/newpanel\">\r\n               <SeperateEditor />\r\n            </Route>\r\n            <Route exact path=\"/ask\">\r\n               <Ask />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n               <Profile />\r\n            </Route>\r\n            <Route exact path=\"/admin\">\r\n               <Admin />\r\n            </Route>\r\n            <Route exact path=\"/explore/:topicTag\">\r\n               <Explore />\r\n            </Route>\r\n            <Route path=\"/problem/:key/:topic/:name\">\r\n               <NewPanel />\r\n            </Route>\r\n\r\n            {/* </Switch> */}\r\n         </Router>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default DashBoard;\r\n","D:\\project\\codebit\\src\\components\\Ask.js",[],"D:\\project\\codebit\\src\\components\\Home.js",["85","86","87","88"],"import React from \"react\";\r\nimport styles from \"./Home.module.css\";\r\nimport Array from \"../images/array.PNG\";\r\nimport LinkedList from \"../images/linkedlist.PNG\";\r\nimport Stack from \"../images/stack.PNG\";\r\nimport Queue from \"../images/queue.PNG\";\r\nimport Tree from \"../images/tree.PNG\";\r\nimport Heap from \"../images/heap.PNG\";\r\nimport Matrix from \"../images/matrix.PNG\";\r\nimport Graph from \"../images/graph.PNG\";\r\nimport Searching from \"../images/searching.PNG\";\r\nimport Sorting from \"../images/sorting.PNG\";\r\nimport Recursion from \"../images/recursion.PNG\";\r\nimport Hashing from \"../images/hashing.PNG\";\r\nimport Explore from \"./Explore\";\r\nimport { Card, Button, CardImg, CardFooter } from \"reactstrap\";\r\nimport {\r\n   BrowserRouter as Router,\r\n   Switch,\r\n   Route,\r\n   Link,\r\n   Redirect,\r\n   useHistory,\r\n} from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n   let history = useHistory();\r\n   console.log(\"history \", history);\r\n   const handlerClick = (tag) => {\r\n      const str = `/explore/${tag}`;\r\n      history.push(str);\r\n   };\r\n   return (\r\n      <div className={styles.container}>\r\n         <h4 className={styles.head3}>Data Structure & Algorithms</h4>\r\n         <hr />\r\n         <Router>\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Array} alt=\"array img\" />\r\n                  <CardFooter>\r\n                     <Link to=\"/explore/array\">\r\n                        <Button\r\n                           variant=\"outline-dark\"\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              handlerClick(\"array\");\r\n                           }}\r\n                        >\r\n                           array\r\n                        </Button>\r\n                     </Link>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={LinkedList} alt=\"linkedlist img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        linkedlist\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Stack} alt=\"stack img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        stack\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n            {/* //--------------------------------------------------------- */}\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Queue} alt=\"queue img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        queue\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Tree} alt=\"tree img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        tree\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Heap} alt=\"heap img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        heap\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n\r\n            {/* //---------------------------------------------- */}\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Matrix} alt=\"Matrix img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        matrix\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Graph} alt=\"Graph img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        graph\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Searching} alt=\"Searching img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        searching\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n\r\n            {/* //---------------------------------------------- */}\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Sorting} alt=\"Sorting img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        sorting\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Recursion} alt=\"Recursion img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        recursion\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Hashing} alt=\"Hashing img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        hashing\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n\r\n            {/* //---------------------------------------------- */}\r\n         </Router>\r\n      </div>\r\n   );\r\n};\r\nexport default Home;\r\n","D:\\project\\codebit\\src\\components\\Logout.js",[],["89","90"],"D:\\project\\codebit\\src\\components\\NewPanel.js",["91","92","93","94"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./NewPanel.module.css\";\r\nimport toggleImg from \"../images/toggle.PNG\";\r\nimport Editor from \"./CodeEditor\";\r\nimport editorItems from \"./EditorItems\";\r\nimport greenIcon from \"../images/greenright.PNG\";\r\nimport redIcon from \"../images/redcross.PNG\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n   Row,\r\n   Col,\r\n   Dropdown,\r\n   DropdownToggle,\r\n   DropdownMenu,\r\n   DropdownItem,\r\n   Button,\r\n   Spinner,\r\n} from \"reactstrap\";\r\nconst {\r\n   allLanguaue,\r\n   allEditor,\r\n   allLightTheme,\r\n   allDarkTheme,\r\n   fontList,\r\n   tabList,\r\n} = editorItems;\r\nconst NewPanel = () => {\r\n   let problems = {};\r\n   let initialLoadData = {};\r\n   const { key, topic } = useParams();\r\n   const history = useHistory();\r\n   const [spinner, setSpinner] = useState(true);\r\n   const [runSpinner, setRunSpinner] = useState(true);\r\n   const [topicTag, setTopicTag] = useState();\r\n   const [problemHead, setProblemHead] = useState();\r\n   const [problem, setProblem] = useState();\r\n   const [input, setInput] = useState();\r\n   const [input1, setInput1] = useState();\r\n   const [input2, setInput2] = useState();\r\n   const [output, setOutput] = useState();\r\n   const [output1, setOutput1] = useState();\r\n   const [output2, setOutput2] = useState();\r\n   const [point, setPoint] = useState();\r\n   const [spaceComplexity, setSpaceComplexity] = useState();\r\n   const [timeComplexity, setTimeComplexity] = useState();\r\n   const [level, setLevel] = useState();\r\n   const [task, setTask] = useState();\r\n   const [constraints, setConstraints] = useState();\r\n\r\n   useEffect(() => {\r\n      fetch(`http://localhost:9999/getProblem/${topic}/${key}`, {\r\n         method: \"POST\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            // setProblems(r);\r\n            problems = [...r];\r\n            let {\r\n               topicTag,\r\n               problemHead,\r\n               problem,\r\n               input,\r\n               input1,\r\n               input2,\r\n               output,\r\n               output1,\r\n               output2,\r\n               point,\r\n               spaceComplexity,\r\n               timeComplexity,\r\n               problemLevel,\r\n               task,\r\n               constraints,\r\n            } = r[0];\r\n            console.log(\"r value :\", r);\r\n            setTopicTag(topicTag);\r\n            setProblemHead(problemHead);\r\n            setProblem(problem);\r\n            setInput(input);\r\n            setInput1(input1);\r\n            setInput2(input2);\r\n            setOutput(output);\r\n            setOutput1(output1);\r\n            setOutput2(output2);\r\n            setPoint(point);\r\n            setSpaceComplexity(spaceComplexity);\r\n            setTimeComplexity(timeComplexity);\r\n            setLevel(problemLevel);\r\n            setTask(task);\r\n            setConstraints(constraints);\r\n         });\r\n   }, []);\r\n   const [userInput, setUserInput] = useState();\r\n   const [userOutput, setUserOutput] = useState(\"\");\r\n   const [testResult, setTestResult] = useState();\r\n   // const value = \"\";\r\n   const [userCode, setUserCode] = useState();\r\n   const [font, setFont] = useState(14);\r\n   const [tab, setTab] = useState(2);\r\n   const [language, setLanguage] = useState();\r\n   const [theme, setTheme] = useState(\"monokai\");\r\n   const [editor, setEditor] = useState(\"ace\");\r\n   const [dropdownOpenFont, setDropdownOpenFont] = useState(false);\r\n   const toggleFont = () => setDropdownOpenFont((prevState) => !prevState);\r\n   const [dropdownOpenTab, setDropdownOpenTab] = useState(false);\r\n   const toggleTab = () => setDropdownOpenTab((prevState) => !prevState);\r\n   const [dropdownOpenLang, setDropdownOpenLang] = useState(false);\r\n   const toggleLang = () => setDropdownOpenLang((prevState) => !prevState);\r\n   const [dropdownOpenTheme, setDropdownOpenTheme] = useState(false);\r\n\r\n   const toggleTheme = () => setDropdownOpenTheme((prevState) => !prevState);\r\n   const [dropdownOpenEditor, setDropdownOpenEditor] = useState(false);\r\n\r\n   const toggleEditor = () => setDropdownOpenEditor((prevState) => !prevState);\r\n   const changeInput = (e) => {\r\n      // console.log(e.target.value);\r\n      setUserInput(e.target.value);\r\n      // setUserOutput(e.target.value);\r\n   };\r\n   //-----------------------------\r\n   const isNullOrUndefined = (value) => value === null || value === undefined;\r\n   //----------------run test cases----------------\r\n\r\n   const submit = async () => {\r\n      // console.log(\"chla submit\");\r\n      let adminResult = await fetch(\"http://localhost:9999/runTestCase\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            key: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            // console.log(r);\r\n            return r;\r\n         });\r\n      ///admin role finish\r\n      let userResult = await fetch(\"http://localhost:9999/runCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            key: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            // console.log(r);\r\n            setUserOutput(\"\");\r\n            return r;\r\n         });\r\n      // console.log(\"userresult :\", userResult.res.stdout);\r\n      // console.log(\"admin res :\", adminResult.res.stdout);\r\n      let flag = false;\r\n      if (\r\n         userResult.res.stdout === adminResult.res.stdout &&\r\n         !isNullOrUndefined(userResult.res.stdout) &&\r\n         !isNullOrUndefined(adminResult.res.stdout) &&\r\n         adminResult.res.stdout.length !== 0 &&\r\n         userResult.res.stdout.length !== 0\r\n      ) {\r\n         console.log(\"test cases passes\");\r\n         setTestResult(2);\r\n         flag = true;\r\n         setSpinner(true);\r\n      } else {\r\n         console.log(\"test cases are not passes\");\r\n         setTestResult(3);\r\n         flag = false;\r\n         setSpinner(true);\r\n      }\r\n      //update database according to the test cases passes or not\r\n      await fetch(\"http://localhost:9999/isdone\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            isDone: flag,\r\n            key: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            if (r.ok) {\r\n               console.log(\"updated id done\");\r\n            } else {\r\n               console.log(\"not updated id done\");\r\n            }\r\n         })\r\n         .catch((e) => {\r\n            console.log(e);\r\n         });\r\n   };\r\n\r\n   //----------------------------------------------------\r\n   const run = () => {\r\n      fetch(\"http://localhost:9999/runCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            questionKey: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            console.log(r.res);\r\n            if (r.res.stdout) {\r\n               setRunSpinner(true);\r\n               setUserOutput(r.res.stdout);\r\n            } else {\r\n               setRunSpinner(true);\r\n               setUserOutput(r.res.stderr);\r\n            }\r\n            // return r;\r\n         });\r\n\r\n      fetch(\"http://localhost:9999/saveUserCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            questionKey: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            if (r.ok) {\r\n               return {\r\n                  sucess: true,\r\n               };\r\n            } else {\r\n               return {\r\n                  sucess: false,\r\n               };\r\n            }\r\n         })\r\n         .then((r) => {\r\n            if (r.sucess) {\r\n               console.log(\"code saved\");\r\n            } else {\r\n               console.log(\"code not saved\");\r\n            }\r\n         });\r\n   };\r\n   //-----------------reset is called\r\n   const reset = () => {\r\n      fetch(`http://localhost:9999/defaultCode`, {\r\n         method: \"GET\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((rs) => {\r\n            return rs.json();\r\n         })\r\n         .then((rs) => {\r\n            console.log(\r\n               \"initial load data :\",\r\n               rs.sourceCode,\r\n               rs.defaultLanguage\r\n            );\r\n            setUserCode(rs.sourceCode);\r\n            setLanguage(rs.defaultLanguage);\r\n         });\r\n\r\n      fetch(\"http://localhost:9999/saveUserCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            questionKey: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            if (r.ok) {\r\n               return {\r\n                  sucess: true,\r\n               };\r\n            } else {\r\n               return {\r\n                  sucess: false,\r\n               };\r\n            }\r\n         })\r\n         .then((r) => {\r\n            if (r.sucess) {\r\n               console.log(\"code saved\");\r\n            } else {\r\n               console.log(\"code not saved\");\r\n            }\r\n         });\r\n   };\r\n\r\n   // ----------when user load page hit api to get its previos data---------------------\r\n   useEffect(() => {\r\n      fetch(`http://localhost:9999/getInitialCode/${key}`, {\r\n         method: \"POST\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            if (r.length === 0) {\r\n               fetch(`http://localhost:9999/defaultCode`, {\r\n                  method: \"GET\",\r\n                  credentials: \"include\",\r\n               })\r\n                  .then((rs) => {\r\n                     return rs.json();\r\n                  })\r\n                  .then((rs) => {\r\n                     // console.log(\r\n                     //    \"initial load data :\",\r\n                     //    rs.sourceCode,\r\n                     //    rs.defaultLanguage,\r\n                     //    rs\r\n                     // );\r\n                     setTestResult(1);\r\n                     setUserCode(rs.sourceCode);\r\n                     setLanguage(rs.defaultLanguage);\r\n                  });\r\n            } else {\r\n               console.log(\"some saved data comming from db\", r);\r\n               if (r[0].isDone) {\r\n                  setTestResult(2);\r\n               } else {\r\n                  setTestResult(3);\r\n               }\r\n               setUserCode(r[0].sourceCode);\r\n               setLanguage(r[0].currentLanguage);\r\n               console.log(\"test result:\", r, testResult);\r\n            }\r\n         });\r\n   }, []);\r\n\r\n   //------------------------------------------\r\n   // console.log(userCode);\r\n   const [toggleProblem, setToggleProblem] = useState(true);\r\n   return (\r\n      <div className={styles.container}>\r\n         <div className={styles.toggle}>\r\n            <Button\r\n               color=\"link\"\r\n               size=\"sm\"\r\n               onClick={() => {\r\n                  history.goBack();\r\n               }}\r\n            >\r\n               back\r\n            </Button>\r\n            <img\r\n               alt=\"toggle alt\"\r\n               className={styles.toggleImg}\r\n               onClick={() => {\r\n                  setToggleProblem(!toggleProblem);\r\n               }}\r\n               src={toggleImg}\r\n            />\r\n         </div>\r\n         {toggleProblem ? (\r\n            <div className={styles.problemContainer}>\r\n               <div className={styles.body}>\r\n                  <h6 className={styles.proHead}>{problemHead}</h6>\r\n                  <div className={styles.row1}>\r\n                     <div>Level : {level}</div>\r\n                     <div>Topic Tag : {topicTag}</div>\r\n                     <div>Point: {point}</div>\r\n                  </div>\r\n                  <hr className={styles.line} />\r\n                  <div className={styles.subcontainer}>\r\n                     <p>{problem}</p>\r\n                     <div className={styles.h7}>\r\n                        Basic info (Input and Output) :\r\n                     </div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input </div>\r\n                        <div>{input}</div>\r\n                        <div className={styles.h7}>Output </div>\r\n                        <div>{output}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 1</div>\r\n                        <div>{input1}</div>\r\n                        <div className={styles.h7}>Output 1</div>\r\n                        <div>{output1}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 2</div>\r\n                        <div>{input2}</div>\r\n                        <div className={styles.h7}>Output 2</div>\r\n                        <div>{output2}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Your Task:</div>\r\n                     <div>{task}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Time Complexity:</div>\r\n                     <div>{timeComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Auxiliary Space:</div>\r\n                     <div> {spaceComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Constraints:</div>\r\n                     <div>{constraints}</div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         ) : (\r\n            <div></div>\r\n         )}\r\n         {/* ------------------------problem part is finished */}\r\n\r\n         <div className={styles.editorHead}>\r\n            <div style={{ color: \"white\" }}>........</div>\r\n            <Dropdown isOpen={dropdownOpenLang} toggle={toggleLang} size=\"sm\">\r\n               <DropdownToggle caret>{language}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allLanguaue.map((lang, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${lang}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setLanguage(lang);\r\n                           }}\r\n                        >\r\n                           {lang}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------------------editor type */}\r\n            <Dropdown isOpen={dropdownOpenTheme} toggle={toggleTheme} size=\"sm\">\r\n               <DropdownToggle caret>{theme}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.themeScroll}>\r\n                     <DropdownItem>Dark Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n\r\n                     {allDarkTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                     <DropdownItem divider />\r\n                     <DropdownItem>Light Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n                     {allLightTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -------editor type */}\r\n            <Dropdown\r\n               isOpen={dropdownOpenEditor}\r\n               toggle={toggleEditor}\r\n               size=\"sm\"\r\n            >\r\n               <DropdownToggle caret>{editor}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allEditor.map((editorValue, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${editorValue}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setEditor(editorValue);\r\n                           }}\r\n                        >\r\n                           {editorValue}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* ----------------------font */}\r\n            <Dropdown isOpen={dropdownOpenFont} toggle={toggleFont} size=\"sm\">\r\n               <DropdownToggle caret>{font}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.fontScroll}>\r\n                     {fontList.map((fontValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${fontValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setFont(fontValue);\r\n                              }}\r\n                           >\r\n                              {fontValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------tab */}\r\n            <Dropdown isOpen={dropdownOpenTab} toggle={toggleTab} size=\"sm\">\r\n               <DropdownToggle caret>tab</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.tabScroll}>\r\n                     {tabList.map((tabValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${tabValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTab(tabValue);\r\n                              }}\r\n                           >\r\n                              {tabValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button color=\"primary\" size=\"sm\" onClick={reset}>\r\n               reset\r\n            </Button>\r\n\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button\r\n               hidden={!runSpinner}\r\n               color=\"primary\"\r\n               size=\"sm\"\r\n               onClick={() => {\r\n                  setRunSpinner(false);\r\n                  run();\r\n               }}\r\n            >\r\n               run\r\n            </Button>\r\n            <Spinner color=\"primary\" hidden={runSpinner} />\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button\r\n               color=\"primary\"\r\n               size=\"sm\"\r\n               onClick={() => {\r\n                  submit();\r\n                  setSpinner(false);\r\n               }}\r\n               hidden={!spinner}\r\n            >\r\n               {\" \"}\r\n               submit\r\n            </Button>\r\n            <Spinner type=\"grow\" color=\"primary\" hidden={spinner} />\r\n         </div>\r\n\r\n         {/* main editor------------------------ */}\r\n         <div>\r\n            <Row className={styles.editorContainer}>\r\n               <Col lg={7} md={7}>\r\n                  <Editor\r\n                     className={styles.editor}\r\n                     value={userCode}\r\n                     tab={tab}\r\n                     language={language}\r\n                     theme={theme}\r\n                     editor={editor}\r\n                     font={font}\r\n                     onChange={setUserCode}\r\n                  />\r\n               </Col>\r\n               <Col lg={5} md={5} className={styles.consoleContainer}>\r\n                  <textarea\r\n                     className={styles.consoleOutput}\r\n                     value={userOutput}\r\n                     disabled\r\n                  >\r\n                     {userOutput}\r\n                  </textarea>\r\n                  <textarea\r\n                     className={styles.consoleInput}\r\n                     onChange={changeInput}\r\n                     value={userInput}\r\n                  ></textarea>\r\n                  <div className={styles.consoleTestcase}>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 1</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 2</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 3</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 4</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                  </div>\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\nexport default NewPanel;\r\n","D:\\project\\codebit\\src\\components\\LeaderBoard.js",["95"],"import React from \"react\";\r\nimport {\r\n   Table,\r\n   Pagination,\r\n   PaginationItem,\r\n   PaginationLink,\r\n   InputGroup,\r\n   Input,\r\n   InputGroupAddon,\r\n   InputGroupText,\r\n   Button,\r\n} from \"reactstrap\";\r\nimport styles from \"./LeaderBoard.module.css\";\r\nconst LeaderBoard = () => {\r\n   const records = [\r\n      {\r\n         userName: \"ram\",\r\n         score: 2345,\r\n         solvedQuestion: 23,\r\n      },\r\n      {\r\n         userName: \"lakhan\",\r\n         score: 233,\r\n         solvedQuestion: 24,\r\n      },\r\n      {\r\n         userName: \"krishna\",\r\n         score: 2355,\r\n         solvedQuestion: 21,\r\n      },\r\n      {\r\n         userName: \"arjun\",\r\n         score: 2345,\r\n         solvedQuestion: 29,\r\n      },\r\n      {\r\n         userName: \"aryan\",\r\n         score: 2345,\r\n         solvedQuestion: 209,\r\n      },\r\n      {\r\n         userName: \"vijay\",\r\n         score: 2005,\r\n         solvedQuestion: 230,\r\n      },\r\n      {\r\n         userName: \"rohit\",\r\n         score: 25,\r\n         solvedQuestion: 111,\r\n      },\r\n      {\r\n         userName: \"shri\",\r\n         score: 234,\r\n         solvedQuestion: 234,\r\n      },\r\n      {\r\n         userName: \"pooja\",\r\n         score: 235,\r\n         solvedQuestion: 567,\r\n      },\r\n      {\r\n         userName: \"ruhi\",\r\n         score: 2985,\r\n         solvedQuestion: 2334,\r\n      },\r\n   ];\r\n   return (\r\n      <div className={styles.container}>\r\n         <div className={styles.header}>\r\n            <InputGroup className={styles.searching} size=\"sm\">\r\n               <Input placeholder=\"searching\" />\r\n               <InputGroupAddon addonType=\"append\">\r\n                  <Button className={styles.btn}>?</Button>\r\n               </InputGroupAddon>\r\n            </InputGroup>\r\n         </div>\r\n         <hr />\r\n         <Table className={styles.table} size=\"sm\" hover>\r\n            <thead>\r\n               <tr>\r\n                  <th>Rank</th>\r\n                  <th>Username</th>\r\n                  <th>Overall Score</th>\r\n                  <th>Solved Questions</th>\r\n               </tr>\r\n            </thead>\r\n            <tbody>\r\n               {records.map((record, index) => {\r\n                  return (\r\n                     <tr>\r\n                        <th scope=\"row\">{index + 1}</th>\r\n                        <td>{record.userName}</td>\r\n                        <td>{record.score}</td>\r\n                        <td>{record.solvedQuestion}</td>\r\n                     </tr>\r\n                  );\r\n               })}\r\n            </tbody>\r\n         </Table>\r\n         <Pagination\r\n            aria-label=\"Page navigation example\"\r\n            className={styles.paginationContainer}\r\n         >\r\n            <PaginationItem disabled>\r\n               <PaginationLink first href=\"#\" />\r\n            </PaginationItem>\r\n            <PaginationItem disabled>\r\n               <PaginationLink previous href=\"#\" />\r\n            </PaginationItem>\r\n            <PaginationItem active>\r\n               <PaginationLink href=\"#\">1</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n               <PaginationLink href=\"#\">2</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n               <PaginationLink href=\"#\">3</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n               <PaginationLink href=\"#\">4</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n               <PaginationLink href=\"#\">5</PaginationLink>\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n               <PaginationLink next href=\"#\" />\r\n            </PaginationItem>\r\n            <PaginationItem>\r\n               <PaginationLink last href=\"#\" />\r\n            </PaginationItem>\r\n         </Pagination>\r\n      </div>\r\n   );\r\n};\r\nexport default LeaderBoard;\r\n","D:\\project\\codebit\\src\\components\\Profile.js",[],"D:\\project\\codebit\\src\\components\\CodeEditor.js",[],"D:\\project\\codebit\\src\\components\\EditorItems.js",[],"D:\\project\\codebit\\src\\components\\Admin.js",[],"D:\\project\\codebit\\src\\components\\Explore.js",["96","97"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport styles from \"./Explore.module.css\";\r\nconst Explore = () => {\r\n   const { topicTag } = useParams();\r\n   const [problems, setProblems] = useState([]);\r\n   const history = useHistory();\r\n   useEffect(() => {\r\n      console.log(\"history :\", history);\r\n      fetch(`http://localhost:9999/getProblemSet/${topicTag}`, {\r\n         method: \"POST\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            setProblems(r);\r\n         });\r\n   }, []);\r\n   console.log(\"problems\", problems);\r\n\r\n   return (\r\n      <div className={styles.container}>\r\n         <div className={styles.btn}>\r\n            <Button\r\n               color=\"link\"\r\n               onClick={() => {\r\n                  history.goBack();\r\n               }}\r\n            >\r\n               back\r\n            </Button>\r\n         </div>\r\n         {/* --------------problem div */}\r\n         <div className={styles.header}>\r\n            <h6 className={styles.subheader}>Tag : {topicTag}</h6>\r\n         </div>\r\n         {problems.map((arr, index) => {\r\n            return (\r\n               <div className={styles.problemDiv} key={arr[\"questionKey\"]}>\r\n                  <div className={styles.h7}>\r\n                     <h6 style={{ color: \"green\" }}>Problem : {index + 1}</h6>\r\n                     <p>Level : {arr[\"problemLevel\"]}</p>\r\n                  </div>\r\n                  <div className={styles.h7}>\r\n                     <h6>{arr[\"problemHead\"]}</h6>\r\n                     <p>Point : {arr[\"point\"]}</p>\r\n                  </div>\r\n                  <p>{arr[\"problem\"]}</p>\r\n\r\n                  <Button\r\n                     size=\"sm\"\r\n                     color=\"primary\"\r\n                     className={styles.problemBtn}\r\n                     onClick={() => {\r\n                        history.push(\r\n                           `/problem/${arr[\"questionKey\"]}/${arr[\"topicTag\"]}/${arr[\"problemHead\"]}`\r\n                        );\r\n                     }}\r\n                  >\r\n                     start\r\n                  </Button>\r\n\r\n                  <hr />\r\n               </div>\r\n            );\r\n         })}\r\n      </div>\r\n   );\r\n};\r\nexport default Explore;\r\n","D:\\project\\codebit\\src\\components\\SeperateEditor.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":11,"column":11,"nodeType":"104","messageId":"105","endLine":11,"endColumn":19},{"ruleId":"102","severity":1,"message":"106","line":2,"column":49,"nodeType":"104","messageId":"105","endLine":2,"endColumn":57},{"ruleId":"102","severity":1,"message":"107","line":30,"column":4,"nodeType":"104","messageId":"105","endLine":30,"endColumn":14},{"ruleId":"108","severity":1,"message":"109","line":141,"column":31,"nodeType":"110","endLine":141,"endColumn":46},{"ruleId":"102","severity":1,"message":"111","line":15,"column":8,"nodeType":"104","messageId":"105","endLine":15,"endColumn":15},{"ruleId":"102","severity":1,"message":"112","line":19,"column":4,"nodeType":"104","messageId":"105","endLine":19,"endColumn":10},{"ruleId":"102","severity":1,"message":"113","line":20,"column":4,"nodeType":"104","messageId":"105","endLine":20,"endColumn":9},{"ruleId":"102","severity":1,"message":"114","line":22,"column":4,"nodeType":"104","messageId":"105","endLine":22,"endColumn":12},{"ruleId":"98","replacedBy":"115"},{"ruleId":"100","replacedBy":"116"},{"ruleId":"102","severity":1,"message":"117","line":29,"column":8,"nodeType":"104","messageId":"105","endLine":29,"endColumn":23},{"ruleId":"102","severity":1,"message":"118","line":60,"column":13,"nodeType":"104","messageId":"105","endLine":60,"endColumn":21},{"ruleId":"119","severity":1,"message":"120","line":60,"column":24,"nodeType":"121","endLine":60,"endColumn":30},{"ruleId":"119","severity":1,"message":"122","line":375,"column":7,"nodeType":"121","endLine":375,"endColumn":9,"suggestions":"123"},{"ruleId":"102","severity":1,"message":"124","line":10,"column":4,"nodeType":"104","messageId":"105","endLine":10,"endColumn":18},{"ruleId":"102","severity":1,"message":"125","line":1,"column":38,"nodeType":"104","messageId":"105","endLine":1,"endColumn":44},{"ruleId":"119","severity":1,"message":"126","line":22,"column":7,"nodeType":"121","endLine":22,"endColumn":9,"suggestions":"127"},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'userName' is assigned a value but never used.","Identifier","unusedVar","'FormText' is defined but never used.","'useHistory' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Explore' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.",["128"],["129"],"'initialLoadData' is assigned a value but never used.","'problems' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'problems' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","React Hook useEffect has missing dependencies: 'key' and 'testResult'. Either include them or remove the dependency array.",["130"],"'InputGroupText' is defined but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'topicTag'. Either include them or remove the dependency array.",["131"],"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [key, testResult]",{"range":"136","text":"137"},"Update the dependencies array to be: [history, topicTag]",{"range":"138","text":"139"},[11838,11840],"[key, testResult]",[693,695],"[history, topicTag]"]