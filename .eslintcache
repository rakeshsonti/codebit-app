[{"D:\\project\\codebit\\src\\index.js":"1","D:\\project\\codebit\\src\\App.js":"2","D:\\project\\codebit\\src\\reportWebVitals.js":"3","D:\\project\\codebit\\src\\components\\Login.js":"4","D:\\project\\codebit\\src\\components\\Signup.js":"5","D:\\project\\codebit\\src\\components\\DashBoard.js":"6","D:\\project\\codebit\\src\\components\\Ask.js":"7","D:\\project\\codebit\\src\\components\\Home.js":"8","D:\\project\\codebit\\src\\components\\Logout.js":"9","D:\\project\\codebit\\src\\components\\NewPanel.js":"10","D:\\project\\codebit\\src\\components\\LeaderBoard.js":"11","D:\\project\\codebit\\src\\components\\Profile.js":"12","D:\\project\\codebit\\src\\components\\CodeEditor.js":"13","D:\\project\\codebit\\src\\components\\EditorItems.js":"14","D:\\project\\codebit\\src\\components\\Admin.js":"15","D:\\project\\codebit\\src\\components\\Explore.js":"16"},{"size":551,"mtime":1609335387991,"results":"17","hashOfConfig":"18"},{"size":3925,"mtime":1609579545593,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":1963,"mtime":1609431277003,"results":"21","hashOfConfig":"18"},{"size":2424,"mtime":1609432345253,"results":"22","hashOfConfig":"18"},{"size":5347,"mtime":1609612924217,"results":"23","hashOfConfig":"18"},{"size":129,"mtime":1609335483018,"results":"24","hashOfConfig":"18"},{"size":6191,"mtime":1609613332039,"results":"25","hashOfConfig":"18"},{"size":110,"mtime":1609337135245,"results":"26","hashOfConfig":"18"},{"size":16484,"mtime":1609613795409,"results":"27","hashOfConfig":"18"},{"size":125,"mtime":1609322538634,"results":"28","hashOfConfig":"18"},{"size":147,"mtime":1609337144530,"results":"29","hashOfConfig":"18"},{"size":2260,"mtime":1609409582421,"results":"30","hashOfConfig":"18"},{"size":1134,"mtime":1609396173812,"results":"31","hashOfConfig":"18"},{"size":9087,"mtime":1609588509278,"results":"32","hashOfConfig":"18"},{"size":2383,"mtime":1609613513436,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"zxdbgk",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\project\\codebit\\src\\index.js",[],["71","72"],"D:\\project\\codebit\\src\\App.js",["73"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport DashBoard from \"./components/DashBoard\";\nfunction App() {\n   const [isLoggIn, setLoggIn] = useState(false);\n   const [isSigninOrLogin, setIsSigninOrLogin] = useState(true);\n   const [loginError, setLoginError] = useState(undefined);\n   const [signupError, setSignupError] = useState(undefined);\n   const [userName, setUserName] = useState(undefined);\n   const getUserName = () => {\n      fetch(\"http://localhost:9999/userinfo\", { credentials: \"include\" })\n         .then((r) => {\n            if (r.ok) {\n               return r.json();\n            } else {\n               setLoggIn(false);\n               setUserName(undefined);\n               return {\n                  success: false,\n               };\n            }\n         })\n         .then((r) => {\n            if (r.success !== false) {\n               setLoggIn(true);\n               setUserName(r.email);\n            }\n         });\n   };\n   useEffect(() => {\n      getUserName();\n   }, []);\n   const LoginHandler = (email, password) => {\n      fetch(\"http://localhost:9999/login\", {\n         method: \"POST\",\n         body: JSON.stringify({ email, password }),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: \"include\",\n      })\n         .then((r) => {\n            //r.ok() is response between 200 to <300 then true otherwise if greater than 300 so false\n            if (r.ok) {\n               return {\n                  success: true,\n               };\n            } else {\n               return r.json();\n            }\n         })\n         .then((r) => {\n            if (r.success === true) {\n               setLoggIn(true);\n               setLoginError(\"\");\n               return getUserName();\n            } else {\n               // setLoggIn(false);\n               setLoginError(r.err);\n            }\n         })\n         .catch((e) => {\n            console.log(e);\n            setLoginError(\"error\");\n         });\n   };\n   const showHandler = () => {\n      setIsSigninOrLogin(!isSigninOrLogin);\n   };\n   const SignupHandler = (name, email, password) => {\n      fetch(\"http://localhost:9999/signup\", {\n         method: \"POST\",\n         body: JSON.stringify({ email, password, name }),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: \"include\",\n      })\n         .then((r) => {\n            //r.ok() is response between 200 to <300 then true otherwise if greater than 300 so false\n            if (r.ok) {\n               return {\n                  success: true,\n               };\n            } else {\n               return r.json();\n            }\n         })\n         .then((r) => {\n            if (r.success === true) {\n               setSignupError(\"\");\n               setIsSigninOrLogin(true);\n            } else {\n               setSignupError(r.err);\n            }\n         })\n         .catch((e) => {\n            console.error(e);\n            setSignupError(e);\n         });\n   };\n   const logoutHandler = () => {\n      return fetch(\"http://localhost:9999/logout\", {\n         method: \"GET\",\n         credentials: \"include\",\n      }).then((r) => {\n         if (r.ok) {\n            setLoggIn(false);\n            setUserName(undefined);\n         }\n      });\n   };\n   return (\n      <div className=\"App\">\n         {isLoggIn ? (\n            <DashBoard logoutHandler={logoutHandler} />\n         ) : isSigninOrLogin ? (\n            <Login\n               LoginHandler={LoginHandler}\n               error={loginError}\n               showHandler={showHandler}\n            />\n         ) : (\n            <Signup\n               SignupHandler={SignupHandler}\n               error={signupError}\n               showHandler={showHandler}\n            />\n         )}\n      </div>\n   );\n}\n\nexport default App;\n","D:\\project\\codebit\\src\\reportWebVitals.js",[],"D:\\project\\codebit\\src\\components\\Login.js",["74"],"import React, { useState } from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\n\r\nimport styles from \"./Login.module.css\";\r\nconst Login = (props) => {\r\n   const [email, setEmail] = useState();\r\n   const [password, setPassword] = useState();\r\n   const onChangeEmail = (e) => {\r\n      setEmail(e.target.value);\r\n   };\r\n   const onChangePassword = (e) => {\r\n      setPassword(e.target.value);\r\n   };\r\n\r\n   const localHandler = (e) => {\r\n      e.preventDefault();\r\n      props.LoginHandler(email, password);\r\n   };\r\n   return (\r\n      <div className={styles.container}>\r\n         <Form className={styles.formBackground} onSubmit={localHandler}>\r\n            <FormGroup>\r\n               <Label for=\"Email\">Email</Label>\r\n               <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"emailId\"\r\n                  placeholder=\"Enter your Email\"\r\n                  onChange={onChangeEmail}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <Label for=\"Password\">Password</Label>\r\n               <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"examplePassword\"\r\n                  placeholder=\"Enter your password\"\r\n                  onChange={onChangePassword}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <p className={styles.error}>{props.error}</p>\r\n            </FormGroup>\r\n            <Button className={styles.button} type=\"submit\">\r\n               login\r\n            </Button>{\" \"}\r\n            <FormGroup className={styles.smallBtn}>\r\n               create an account?\r\n               <Button color=\"link\" size=\"sm\" onClick={props.showHandler}>\r\n                  sign up\r\n               </Button>\r\n            </FormGroup>\r\n         </Form>\r\n      </div>\r\n   );\r\n};\r\nexport default Login;\r\n","D:\\project\\codebit\\src\\components\\Signup.js",[],"D:\\project\\codebit\\src\\components\\DashBoard.js",["75"],"D:\\project\\codebit\\src\\components\\Ask.js",[],"D:\\project\\codebit\\src\\components\\Home.js",["76","77","78","79"],"D:\\project\\codebit\\src\\components\\Logout.js",[],["80","81"],"D:\\project\\codebit\\src\\components\\NewPanel.js",["82","83","84","85","86"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./NewPanel.module.css\";\r\nimport toggleImg from \"../images/toggle.PNG\";\r\nimport Editor from \"./CodeEditor\";\r\nimport editorItems from \"./EditorItems\";\r\nimport greenIcon from \"../images/greenright.PNG\";\r\nimport redIcon from \"../images/redcross.PNG\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n   Row,\r\n   Col,\r\n   Dropdown,\r\n   DropdownToggle,\r\n   DropdownMenu,\r\n   DropdownItem,\r\n   Button,\r\n} from \"reactstrap\";\r\nconst {\r\n   allLanguaue,\r\n   allEditor,\r\n   allLightTheme,\r\n   allDarkTheme,\r\n   fontList,\r\n   tabList,\r\n} = editorItems;\r\nconst NewPanel = () => {\r\n   let problems = {};\r\n   const { key, topic } = useParams();\r\n   const history = useHistory();\r\n   const [topicTag, setTopicTag] = useState();\r\n   const [problemHead, setProblemHead] = useState();\r\n   const [problem, setProblem] = useState();\r\n   const [input, setInput] = useState();\r\n   const [input1, setInput1] = useState();\r\n   const [input2, setInput2] = useState();\r\n   const [output, setOutput] = useState();\r\n   const [output1, setOutput1] = useState();\r\n   const [output2, setOutput2] = useState();\r\n   const [point, setPoint] = useState();\r\n   const [spaceComplexity, setSpaceComplexity] = useState();\r\n   const [timeComplexity, setTimeComplexity] = useState();\r\n   const [level, setLevel] = useState();\r\n   const [task, setTask] = useState();\r\n   const [constraints, setConstraints] = useState();\r\n\r\n   useEffect(() => {\r\n      fetch(`http://localhost:9999/getProblem/${topic}/${key}`, {\r\n         method: \"POST\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            // setProblems(r);\r\n            problems = [...r];\r\n            let {\r\n               topicTag,\r\n               problemHead,\r\n               problem,\r\n               input,\r\n               input1,\r\n               input2,\r\n               output,\r\n               output1,\r\n               output2,\r\n               point,\r\n               spaceComplexity,\r\n               timeComplexity,\r\n               problemLevel,\r\n               task,\r\n               constraints,\r\n            } = r[0];\r\n            console.log(\"r value :\", r);\r\n            setTopicTag(topicTag);\r\n            setProblemHead(problemHead);\r\n            setProblem(problem);\r\n            setInput(input);\r\n            setInput1(input1);\r\n            setInput2(input2);\r\n            setOutput(output);\r\n            setOutput1(output1);\r\n            setOutput2(output2);\r\n            setPoint(point);\r\n            setSpaceComplexity(spaceComplexity);\r\n            setTimeComplexity(timeComplexity);\r\n            setLevel(problemLevel);\r\n            setTask(task);\r\n            setConstraints(constraints);\r\n         });\r\n   }, []);\r\n   // console.log(\"ques key : \", questionKey);\r\n   const [userInput, setUserInput] = useState();\r\n   const [userOutput, setUserOutput] = useState(\"\");\r\n   const [testResult, setTestResult] = useState([true, false, true, false]);\r\n   const value = \"public static vois main(String args[]);\";\r\n   const [userCode, setUserCode] = useState(value);\r\n   const [font, setFont] = useState(10);\r\n   const [tab, setTab] = useState(4);\r\n   const [language, setLanguage] = useState(\"java\");\r\n   const [theme, setTheme] = useState(\"monokai\");\r\n   const [editor, setEditor] = useState(\"vscode\");\r\n   const [dropdownOpenFont, setDropdownOpenFont] = useState(false);\r\n   const toggleFont = () => setDropdownOpenFont((prevState) => !prevState);\r\n   const [dropdownOpenTab, setDropdownOpenTab] = useState(false);\r\n   const toggleTab = () => setDropdownOpenTab((prevState) => !prevState);\r\n   const [dropdownOpenLang, setDropdownOpenLang] = useState(false);\r\n   const toggleLang = () => setDropdownOpenLang((prevState) => !prevState);\r\n   const [dropdownOpenTheme, setDropdownOpenTheme] = useState(false);\r\n\r\n   const toggleTheme = () => setDropdownOpenTheme((prevState) => !prevState);\r\n   const [dropdownOpenEditor, setDropdownOpenEditor] = useState(false);\r\n\r\n   const toggleEditor = () => setDropdownOpenEditor((prevState) => !prevState);\r\n   const changeInput = (e) => {\r\n      // console.log(e.target.value);\r\n      setUserInput(e.target.value);\r\n      // setUserOutput(e.target.value);\r\n   };\r\n\r\n   const run = () => {\r\n      fetch(\"http://localhost:9999/run\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            sourceCode: userCode,\r\n            language: language,\r\n            input: userInput,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n      })\r\n         .then((r) => {\r\n            return r.JSON();\r\n            // console.log(r.JSON());\r\n            // setUserOutput(\"ram is great\\r\\n260\\r\\n\");\r\n         })\r\n         .then((r) => console.log(r))\r\n         .catch((e) => {\r\n            console.log(e);\r\n         });\r\n   };\r\n\r\n   // -------------------------------\r\n   // console.log(userCode);\r\n   const [toggleProblem, setToggleProblem] = useState(true);\r\n   return (\r\n      <div className={styles.container}>\r\n         <div className={styles.toggle}>\r\n            <Button\r\n               color=\"link\"\r\n               size=\"sm\"\r\n               onClick={() => {\r\n                  history.goBack();\r\n               }}\r\n            >\r\n               back\r\n            </Button>\r\n            <img\r\n               alt=\"toggle alt\"\r\n               className={styles.toggleImg}\r\n               onClick={() => {\r\n                  setToggleProblem(!toggleProblem);\r\n                  // setUserOutput(\"ram is great\\r\\n260\\r\\n\");\r\n               }}\r\n               src={toggleImg}\r\n            />\r\n         </div>\r\n         {toggleProblem ? (\r\n            <div className={styles.problemContainer}>\r\n               <div className={styles.body}>\r\n                  <h6 className={styles.proHead}>{problemHead}</h6>\r\n                  <div className={styles.row1}>\r\n                     <div>Level : {level}</div>\r\n                     <div>Topic Tag : {topicTag}</div>\r\n                     <div>Point: {point}</div>\r\n                  </div>\r\n                  <hr className={styles.line} />\r\n                  <div className={styles.subcontainer}>\r\n                     <p>{problem}</p>\r\n                     <div className={styles.h7}>\r\n                        Basic info (Input and Output) :\r\n                     </div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input </div>\r\n                        <div>{input}</div>\r\n                        <div className={styles.h7}>Output </div>\r\n                        <div>{output}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 1</div>\r\n                        <div>{input1}</div>\r\n                        <div className={styles.h7}>Output 1</div>\r\n                        <div>{output1}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 2</div>\r\n                        <div>{input2}</div>\r\n                        <div className={styles.h7}>Output 2</div>\r\n                        <div>{output2}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Your Task:</div>\r\n                     <div>{task}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Time Complexity:</div>\r\n                     <div>{timeComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Auxiliary Space:</div>\r\n                     <div> {spaceComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Constraints:</div>\r\n                     <div>{constraints}</div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         ) : (\r\n            <div></div>\r\n         )}\r\n         {/* ------------------------problem part is finished */}\r\n\r\n         <div className={styles.editorHead}>\r\n            <div style={{ color: \"white\" }}>........</div>\r\n            <Dropdown isOpen={dropdownOpenLang} toggle={toggleLang} size=\"sm\">\r\n               <DropdownToggle caret>{language}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allLanguaue.map((lang, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${lang}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setLanguage(lang);\r\n                           }}\r\n                        >\r\n                           {lang}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------------------editor type */}\r\n            <Dropdown isOpen={dropdownOpenTheme} toggle={toggleTheme} size=\"sm\">\r\n               <DropdownToggle caret>{theme}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.themeScroll}>\r\n                     <DropdownItem>Dark Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n\r\n                     {allDarkTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                     <DropdownItem divider />\r\n                     <DropdownItem>Light Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n                     {allLightTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -------editor type */}\r\n            <Dropdown\r\n               isOpen={dropdownOpenEditor}\r\n               toggle={toggleEditor}\r\n               size=\"sm\"\r\n            >\r\n               <DropdownToggle caret>{editor}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allEditor.map((editorValue, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${editorValue}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setEditor(editorValue);\r\n                           }}\r\n                        >\r\n                           {editorValue}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* ----------------------font */}\r\n            <Dropdown isOpen={dropdownOpenFont} toggle={toggleFont} size=\"sm\">\r\n               <DropdownToggle caret>{font}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.fontScroll}>\r\n                     {fontList.map((fontValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${fontValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setFont(fontValue);\r\n                              }}\r\n                           >\r\n                              {fontValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------tab */}\r\n            <Dropdown isOpen={dropdownOpenTab} toggle={toggleTab} size=\"sm\">\r\n               <DropdownToggle caret>{tab}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.tabScroll}>\r\n                     {tabList.map((tabValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${tabValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTab(tabValue);\r\n                              }}\r\n                           >\r\n                              {tabValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button size=\"sm\">reset</Button>\r\n\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button color=\"primary\" size=\"sm\">\r\n               run\r\n            </Button>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button color=\"primary\" size=\"sm\">\r\n               submit\r\n            </Button>\r\n         </div>\r\n\r\n         {/* main editor------------------------ */}\r\n         <div>\r\n            <Row className={styles.editorContainer}>\r\n               <Col lg={7} md={7}>\r\n                  <Editor\r\n                     className={styles.editor}\r\n                     value={userCode}\r\n                     tab={tab}\r\n                     language={language}\r\n                     theme={theme}\r\n                     editor={editor}\r\n                     font={font}\r\n                     onChange={setUserCode}\r\n                  />\r\n               </Col>\r\n               <Col lg={5} md={5} className={styles.consoleContainer}>\r\n                  <textarea\r\n                     className={styles.consoleOutput}\r\n                     value={userOutput}\r\n                     disabled\r\n                  >\r\n                     {userOutput}\r\n                  </textarea>\r\n                  <textarea\r\n                     className={styles.consoleInput}\r\n                     onChange={changeInput}\r\n                     value={userInput}\r\n                  ></textarea>\r\n                  <div className={styles.consoleTestcase}>\r\n                     {testResult.map((res, index) => {\r\n                        return (\r\n                           <div\r\n                              className={styles.testDiv}\r\n                              key={`${res}${index}`}\r\n                           >\r\n                              <h6>Test case {index + 1}</h6>\r\n                              {res ? (\r\n                                 <img\r\n                                    src={greenIcon}\r\n                                    alt=\"test img\"\r\n                                    className={styles.testimg}\r\n                                 ></img>\r\n                              ) : (\r\n                                 <img\r\n                                    src={redIcon}\r\n                                    alt=\"test img\"\r\n                                    className={styles.testimg}\r\n                                 ></img>\r\n                              )}\r\n                           </div>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\nexport default NewPanel;\r\n","D:\\project\\codebit\\src\\components\\LeaderBoard.js",[],"D:\\project\\codebit\\src\\components\\Profile.js",[],"D:\\project\\codebit\\src\\components\\CodeEditor.js",[],"D:\\project\\codebit\\src\\components\\EditorItems.js",[],"D:\\project\\codebit\\src\\components\\Admin.js",[],"D:\\project\\codebit\\src\\components\\Explore.js",["87"],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":11,"column":11,"nodeType":"94","messageId":"95","endLine":11,"endColumn":19},{"ruleId":"92","severity":1,"message":"96","line":2,"column":49,"nodeType":"94","messageId":"95","endLine":2,"endColumn":57},{"ruleId":"92","severity":1,"message":"97","line":16,"column":4,"nodeType":"94","messageId":"95","endLine":16,"endColumn":14},{"ruleId":"92","severity":1,"message":"98","line":15,"column":8,"nodeType":"94","messageId":"95","endLine":15,"endColumn":15},{"ruleId":"92","severity":1,"message":"99","line":19,"column":4,"nodeType":"94","messageId":"95","endLine":19,"endColumn":10},{"ruleId":"92","severity":1,"message":"100","line":20,"column":4,"nodeType":"94","messageId":"95","endLine":20,"endColumn":9},{"ruleId":"92","severity":1,"message":"101","line":22,"column":4,"nodeType":"94","messageId":"95","endLine":22,"endColumn":12},{"ruleId":"88","replacedBy":"102"},{"ruleId":"90","replacedBy":"103"},{"ruleId":"92","severity":1,"message":"104","line":56,"column":13,"nodeType":"94","messageId":"95","endLine":56,"endColumn":21},{"ruleId":"105","severity":1,"message":"106","line":56,"column":24,"nodeType":"107","endLine":56,"endColumn":30},{"ruleId":"92","severity":1,"message":"108","line":94,"column":23,"nodeType":"94","messageId":"95","endLine":94,"endColumn":36},{"ruleId":"92","severity":1,"message":"109","line":95,"column":23,"nodeType":"94","messageId":"95","endLine":95,"endColumn":36},{"ruleId":"92","severity":1,"message":"110","line":121,"column":10,"nodeType":"94","messageId":"95","endLine":121,"endColumn":13},{"ruleId":"105","severity":1,"message":"111","line":23,"column":7,"nodeType":"107","endLine":23,"endColumn":9,"suggestions":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'userName' is assigned a value but never used.","Identifier","unusedVar","'FormText' is defined but never used.","'useHistory' is defined but never used.","'Explore' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.",["113"],["114"],"'problems' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'problems' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","'setUserOutput' is assigned a value but never used.","'setTestResult' is assigned a value but never used.","'run' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'topicTag'. Either include them or remove the dependency array.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [history, topicTag]",{"range":"118","text":"119"},[687,689],"[history, topicTag]"]