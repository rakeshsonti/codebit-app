[{"D:\\project\\codebit\\src\\index.js":"1","D:\\project\\codebit\\src\\App.js":"2","D:\\project\\codebit\\src\\reportWebVitals.js":"3","D:\\project\\codebit\\src\\components\\Login.js":"4","D:\\project\\codebit\\src\\components\\DashBoard.js":"5","D:\\project\\codebit\\src\\components\\Ask.js":"6","D:\\project\\codebit\\src\\components\\Home.js":"7","D:\\project\\codebit\\src\\components\\NewPanel.js":"8","D:\\project\\codebit\\src\\components\\LeaderBoard.js":"9","D:\\project\\codebit\\src\\components\\CodeEditor.js":"10","D:\\project\\codebit\\src\\components\\EditorItems.js":"11","D:\\project\\codebit\\src\\components\\Admin.js":"12","D:\\project\\codebit\\src\\components\\Explore.js":"13","D:\\project\\codebit\\src\\components\\SeperateEditor.js":"14","D:\\project\\codebit\\src\\components\\Signup.js":"15"},{"size":551,"mtime":1609335387991,"results":"16","hashOfConfig":"17"},{"size":3957,"mtime":1610118573490,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":1953,"mtime":1609962876963,"results":"20","hashOfConfig":"17"},{"size":8724,"mtime":1610630876965,"results":"21","hashOfConfig":"17"},{"size":12277,"mtime":1609974412074,"results":"22","hashOfConfig":"17"},{"size":7921,"mtime":1609974168660,"results":"23","hashOfConfig":"17"},{"size":26042,"mtime":1609974850104,"results":"24","hashOfConfig":"17"},{"size":5551,"mtime":1610631314585,"results":"25","hashOfConfig":"17"},{"size":2217,"mtime":1609974408848,"results":"26","hashOfConfig":"17"},{"size":1120,"mtime":1609651359033,"results":"27","hashOfConfig":"17"},{"size":13510,"mtime":1610634175552,"results":"28","hashOfConfig":"17"},{"size":2297,"mtime":1609962767493,"results":"29","hashOfConfig":"17"},{"size":9919,"mtime":1609974901506,"results":"30","hashOfConfig":"17"},{"size":2424,"mtime":1609974919111,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"zxdbgk",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\project\\codebit\\src\\index.js",[],["65","66"],"D:\\project\\codebit\\src\\App.js",[],"D:\\project\\codebit\\src\\reportWebVitals.js",[],"D:\\project\\codebit\\src\\components\\Login.js",[],"D:\\project\\codebit\\src\\components\\DashBoard.js",[],"D:\\project\\codebit\\src\\components\\Ask.js",[],"D:\\project\\codebit\\src\\components\\Home.js",[],"D:\\project\\codebit\\src\\components\\NewPanel.js",["67","68"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./NewPanel.module.css\";\r\nimport toggleImg from \"../images/toggle.PNG\";\r\nimport Editor from \"./CodeEditor\";\r\nimport editorItems from \"./EditorItems\";\r\nimport greenIcon from \"../images/greenright.PNG\";\r\nimport redIcon from \"../images/redcross.PNG\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n   Row,\r\n   Col,\r\n   Dropdown,\r\n   DropdownToggle,\r\n   DropdownMenu,\r\n   DropdownItem,\r\n   Button,\r\n   Spinner,\r\n} from \"reactstrap\";\r\nconst {\r\n   allLanguaue,\r\n   allEditor,\r\n   allLightTheme,\r\n   allDarkTheme,\r\n   fontList,\r\n   tabList,\r\n} = editorItems;\r\nconst NewPanel = () => {\r\n   const { key, topic } = useParams();\r\n   const history = useHistory();\r\n   const [spinner, setSpinner] = useState(true);\r\n   const [runSpinner, setRunSpinner] = useState(true);\r\n   const [topicTag, setTopicTag] = useState();\r\n   const [problemHead, setProblemHead] = useState();\r\n   const [problem, setProblem] = useState();\r\n   const [input, setInput] = useState();\r\n   const [input1, setInput1] = useState();\r\n   const [input2, setInput2] = useState();\r\n   const [output, setOutput] = useState();\r\n   const [output1, setOutput1] = useState();\r\n   const [output2, setOutput2] = useState();\r\n   const [point, setPoint] = useState();\r\n   const [spaceComplexity, setSpaceComplexity] = useState();\r\n   const [timeComplexity, setTimeComplexity] = useState();\r\n   const [level, setLevel] = useState();\r\n   const [task, setTask] = useState();\r\n   const [constraints, setConstraints] = useState();\r\n\r\n   useEffect(() => {\r\n      fetch(`http://localhost:9999/getProblem/${topic}/${key}`, {\r\n         method: \"POST\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            let {\r\n               topicTag,\r\n               problemHead,\r\n               problem,\r\n               input,\r\n               input1,\r\n               input2,\r\n               output,\r\n               output1,\r\n               output2,\r\n               point,\r\n               spaceComplexity,\r\n               timeComplexity,\r\n               problemLevel,\r\n               task,\r\n               constraints,\r\n            } = r[0];\r\n            setTopicTag(topicTag);\r\n            setProblemHead(problemHead);\r\n            setProblem(problem);\r\n            setInput(input);\r\n            setInput1(input1);\r\n            setInput2(input2);\r\n            setOutput(output);\r\n            setOutput1(output1);\r\n            setOutput2(output2);\r\n            setPoint(point);\r\n            setSpaceComplexity(spaceComplexity);\r\n            setTimeComplexity(timeComplexity);\r\n            setLevel(problemLevel);\r\n            setTask(task);\r\n            setConstraints(constraints);\r\n         });\r\n   }, []);\r\n   const [userInput, setUserInput] = useState();\r\n   const [userOutput, setUserOutput] = useState(\"\");\r\n   const [testResult, setTestResult] = useState();\r\n   const [userCode, setUserCode] = useState();\r\n   const [font, setFont] = useState(14);\r\n   const [tab, setTab] = useState(2);\r\n   const [language, setLanguage] = useState();\r\n   const [theme, setTheme] = useState(\"monokai\");\r\n   const [editor, setEditor] = useState(\"ace\");\r\n   const [dropdownOpenFont, setDropdownOpenFont] = useState(false);\r\n   const toggleFont = () => setDropdownOpenFont((prevState) => !prevState);\r\n   const [dropdownOpenTab, setDropdownOpenTab] = useState(false);\r\n   const toggleTab = () => setDropdownOpenTab((prevState) => !prevState);\r\n   const [dropdownOpenLang, setDropdownOpenLang] = useState(false);\r\n   const toggleLang = () => setDropdownOpenLang((prevState) => !prevState);\r\n   const [dropdownOpenTheme, setDropdownOpenTheme] = useState(false);\r\n\r\n   const toggleTheme = () => setDropdownOpenTheme((prevState) => !prevState);\r\n   const [dropdownOpenEditor, setDropdownOpenEditor] = useState(false);\r\n\r\n   const toggleEditor = () => setDropdownOpenEditor((prevState) => !prevState);\r\n   const changeInput = (e) => {\r\n      setUserInput(e.target.value);\r\n   };\r\n   const isNullOrUndefined = (value) => value === null || value === undefined;\r\n   const submit = async () => {\r\n      let adminResult = await fetch(\"http://localhost:9999/runTestCase\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            sourceCode: userCode,\r\n            point,\r\n            key: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            // console.log(r);\r\n            return r;\r\n         });\r\n      ///admin role finish\r\n      let userResult = await fetch(\"http://localhost:9999/runUserCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            key: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            setUserOutput(\"\");\r\n            return r;\r\n         });\r\n      let flag = false;\r\n      if (\r\n         userResult.res.stdout === adminResult.res.stdout &&\r\n         !isNullOrUndefined(userResult.res.stdout) &&\r\n         !isNullOrUndefined(adminResult.res.stdout) &&\r\n         adminResult.res.stdout.length !== 0 &&\r\n         userResult.res.stdout.length !== 0\r\n      ) {\r\n         setTestResult(2);\r\n         flag = true;\r\n         setSpinner(true);\r\n      } else {\r\n         setTestResult(3);\r\n         flag = false;\r\n         setSpinner(true);\r\n      }\r\n      //--------------------------\r\n      fetch(\"http://localhost:9999/saveUserCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            questionKey: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            if (r.ok) {\r\n               return {\r\n                  sucess: true,\r\n               };\r\n            } else {\r\n               return {\r\n                  sucess: false,\r\n               };\r\n            }\r\n         })\r\n         .then((r) => {\r\n            // if (r.sucess) {\r\n            //    // console.log(\"code saved\");\r\n            // } else {\r\n            //    console.log(\"code not saved\");\r\n            // }\r\n         });\r\n      //update database according to the test cases passes or not\r\n      await fetch(\"http://localhost:9999/isdone\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            isDone: flag,\r\n            key: key,\r\n            point: point,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            // if (r.ok) {\r\n            //    console.log(\"updated id done\");\r\n            // } else {\r\n            //    console.log(\"not updated id done\");\r\n            // }\r\n         })\r\n         .catch((e) => {\r\n            console.log(e);\r\n         });\r\n   };\r\n   //----------------------------------------------------\r\n   const run = () => {\r\n      fetch(\"http://localhost:9999/runCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            questionKey: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            if (r.res.stdout) {\r\n               setRunSpinner(true);\r\n               setUserOutput(r.res.stdout);\r\n            } else {\r\n               setRunSpinner(true);\r\n               setUserOutput(r.res.stderr);\r\n            }\r\n         });\r\n\r\n      fetch(\"http://localhost:9999/saveUserCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            questionKey: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            if (r.ok) {\r\n               return {\r\n                  sucess: true,\r\n               };\r\n            } else {\r\n               return {\r\n                  sucess: false,\r\n               };\r\n            }\r\n         })\r\n         .then((r) => {\r\n            // if (r.sucess) {\r\n            //    console.log(\"code saved\");\r\n            // } else {\r\n            //    console.log(\"code not saved\");\r\n            // }\r\n         });\r\n   };\r\n   //-----------------reset is called\r\n   const reset = () => {\r\n      fetch(`http://localhost:9999/defaultCode`, {\r\n         method: \"GET\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((rs) => {\r\n            return rs.json();\r\n         })\r\n         .then((rs) => {\r\n            setUserCode(rs.sourceCode);\r\n            setLanguage(rs.defaultLanguage);\r\n         });\r\n\r\n      fetch(\"http://localhost:9999/saveUserCode\", {\r\n         method: \"POST\",\r\n         body: JSON.stringify({\r\n            input: userInput,\r\n            currentLanguage: language,\r\n            sourceCode: userCode,\r\n            point,\r\n            questionKey: key,\r\n         }),\r\n         headers: {\r\n            \"Content-Type\": \"application/json\",\r\n         },\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            if (r.ok) {\r\n               return {\r\n                  sucess: true,\r\n               };\r\n            } else {\r\n               return {\r\n                  sucess: false,\r\n               };\r\n            }\r\n         })\r\n         .then((r) => {\r\n            // if (r.sucess) {\r\n            //    console.log(\"code saved\");\r\n            // } else {\r\n            //    console.log(\"code not saved\");\r\n            // }\r\n         });\r\n   };\r\n\r\n   // ----------when user load page hit api to get its previos data---------------------\r\n   useEffect(() => {\r\n      fetch(`http://localhost:9999/getInitialCode/${key}`, {\r\n         method: \"POST\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            if (r.length === 0) {\r\n               fetch(`http://localhost:9999/defaultCode`, {\r\n                  method: \"GET\",\r\n                  credentials: \"include\",\r\n               })\r\n                  .then((rs) => {\r\n                     return rs.json();\r\n                  })\r\n                  .then((rs) => {\r\n                     setTestResult(1);\r\n                     setUserCode(rs.sourceCode);\r\n                     setLanguage(rs.defaultLanguage);\r\n                  });\r\n            } else {\r\n               if (r[0].isDone) {\r\n                  setTestResult(2);\r\n               } else {\r\n                  setTestResult(3);\r\n               }\r\n               setUserCode(r[0].sourceCode);\r\n               setLanguage(r[0].currentLanguage);\r\n            }\r\n         });\r\n   }, []);\r\n   //------------------------------------------\r\n   const [toggleProblem, setToggleProblem] = useState(true);\r\n   return (\r\n      <div className={styles.container}>\r\n         <div className={styles.toggle}>\r\n            <Button\r\n               color=\"link\"\r\n               size=\"sm\"\r\n               onClick={() => {\r\n                  history.goBack();\r\n               }}\r\n            >\r\n               back\r\n            </Button>\r\n            <img\r\n               alt=\"toggle alt\"\r\n               className={styles.toggleImg}\r\n               onClick={() => {\r\n                  setToggleProblem(!toggleProblem);\r\n               }}\r\n               src={toggleImg}\r\n            />\r\n         </div>\r\n         {toggleProblem ? (\r\n            <div className={styles.problemContainer}>\r\n               <div className={styles.body}>\r\n                  <h6 className={styles.proHead}>{problemHead}</h6>\r\n                  <div className={styles.row1}>\r\n                     <div>Level : {level}</div>\r\n                     <div>Topic Tag : {topicTag}</div>\r\n                     <div>Point: {point}</div>\r\n                  </div>\r\n                  <hr className={styles.line} />\r\n                  <div className={styles.subcontainer}>\r\n                     <p>{problem}</p>\r\n                     <div className={styles.h7}>\r\n                        Basic info (Input and Output) :\r\n                     </div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input </div>\r\n                        <div>{input}</div>\r\n                        <div className={styles.h7}>Output </div>\r\n                        <div>{output}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 1</div>\r\n                        <div>{input1}</div>\r\n                        <div className={styles.h7}>Output 1</div>\r\n                        <div>{output1}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Example :</div>{\" \"}\r\n                     <div className={styles.input}>\r\n                        <div className={styles.h7}>Input 2</div>\r\n                        <div>{input2}</div>\r\n                        <div className={styles.h7}>Output 2</div>\r\n                        <div>{output2}</div>\r\n                     </div>\r\n                     <br />\r\n                     <div className={styles.h7}>Your Task:</div>\r\n                     <div>{task}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Time Complexity:</div>\r\n                     <div>{timeComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Expected Auxiliary Space:</div>\r\n                     <div> {spaceComplexity}</div>\r\n                     <br />\r\n                     <div className={styles.h7}>Constraints:</div>\r\n                     <div>{constraints}</div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         ) : (\r\n            <div></div>\r\n         )}\r\n         {/* ------------------------problem part is finished */}\r\n\r\n         <div className={styles.editorHead}>\r\n            <div style={{ color: \"white\" }}>........</div>\r\n            <Dropdown isOpen={dropdownOpenLang} toggle={toggleLang} size=\"sm\">\r\n               <DropdownToggle caret>{language}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allLanguaue.map((lang, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${lang}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setLanguage(lang);\r\n                           }}\r\n                        >\r\n                           {lang}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------------------editor type */}\r\n            <Dropdown isOpen={dropdownOpenTheme} toggle={toggleTheme} size=\"sm\">\r\n               <DropdownToggle caret>{theme}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.themeScroll}>\r\n                     <DropdownItem>Dark Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n\r\n                     {allDarkTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                     <DropdownItem divider />\r\n                     <DropdownItem>Light Theme</DropdownItem>\r\n                     <DropdownItem divider />\r\n                     {allLightTheme.map((themeValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${themeValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTheme(themeValue);\r\n                              }}\r\n                           >\r\n                              {themeValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -------editor type */}\r\n            <Dropdown\r\n               isOpen={dropdownOpenEditor}\r\n               toggle={toggleEditor}\r\n               size=\"sm\"\r\n            >\r\n               <DropdownToggle caret>{editor}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  {allEditor.map((editorValue, index) => {\r\n                     return (\r\n                        <DropdownItem\r\n                           key={`${editorValue}${index}`}\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              setEditor(editorValue);\r\n                           }}\r\n                        >\r\n                           {editorValue}\r\n                        </DropdownItem>\r\n                     );\r\n                  })}\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* ----------------------font */}\r\n            <Dropdown isOpen={dropdownOpenFont} toggle={toggleFont} size=\"sm\">\r\n               <DropdownToggle caret>{font}</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.fontScroll}>\r\n                     {fontList.map((fontValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${fontValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setFont(fontValue);\r\n                              }}\r\n                           >\r\n                              {fontValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            {/* -----------tab */}\r\n            <Dropdown isOpen={dropdownOpenTab} toggle={toggleTab} size=\"sm\">\r\n               <DropdownToggle caret>tab</DropdownToggle>\r\n               <DropdownMenu>\r\n                  <div className={styles.tabScroll}>\r\n                     {tabList.map((tabValue, index) => {\r\n                        return (\r\n                           <DropdownItem\r\n                              key={`${tabValue}${index}`}\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                 setTab(tabValue);\r\n                              }}\r\n                           >\r\n                              {tabValue}\r\n                           </DropdownItem>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               </DropdownMenu>\r\n            </Dropdown>\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button color=\"primary\" size=\"sm\" onClick={reset}>\r\n               reset\r\n            </Button>\r\n\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button\r\n               hidden={!runSpinner}\r\n               color=\"primary\"\r\n               size=\"sm\"\r\n               onClick={() => {\r\n                  setRunSpinner(false);\r\n                  run();\r\n               }}\r\n            >\r\n               run\r\n            </Button>\r\n            <Spinner color=\"primary\" hidden={runSpinner} />\r\n            <div style={{ color: \"white\" }}>.....</div>\r\n            <Button\r\n               color=\"primary\"\r\n               size=\"sm\"\r\n               onClick={() => {\r\n                  submit();\r\n                  setSpinner(false);\r\n               }}\r\n               hidden={!spinner}\r\n            >\r\n               {\" \"}\r\n               submit\r\n            </Button>\r\n            <Spinner type=\"grow\" color=\"primary\" hidden={spinner} />\r\n         </div>\r\n\r\n         {/* main editor------------------------ */}\r\n         <div>\r\n            <Row className={styles.editorContainer}>\r\n               <Col lg={7} md={7}>\r\n                  <Editor\r\n                     className={styles.editor}\r\n                     value={userCode}\r\n                     tab={tab}\r\n                     language={language}\r\n                     theme={theme}\r\n                     editor={editor}\r\n                     font={font}\r\n                     onChange={setUserCode}\r\n                  />\r\n               </Col>\r\n               <Col lg={5} md={5} className={styles.consoleContainer}>\r\n                  <textarea\r\n                     className={styles.consoleOutput}\r\n                     value={userOutput}\r\n                     disabled\r\n                  >\r\n                     {userOutput}\r\n                  </textarea>\r\n                  <textarea\r\n                     className={styles.consoleInput}\r\n                     onChange={changeInput}\r\n                     value={userInput}\r\n                  ></textarea>\r\n                  <div className={styles.consoleTestcase}>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 1</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 2</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 3</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                     <div className={styles.testDiv}>\r\n                        <h6>Test case 4</h6>\r\n                        {testResult === 1 ? null : testResult === 2 ? (\r\n                           <img\r\n                              src={greenIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        ) : (\r\n                           <img\r\n                              src={redIcon}\r\n                              alt=\"test img\"\r\n                              className={styles.testimg}\r\n                              hidden={!spinner}\r\n                           ></img>\r\n                        )}\r\n                        <Spinner color=\"success\" hidden={spinner} />\r\n                     </div>\r\n                  </div>\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\nexport default NewPanel;\r\n","D:\\project\\codebit\\src\\components\\LeaderBoard.js",["69"],"D:\\project\\codebit\\src\\components\\CodeEditor.js",[],"D:\\project\\codebit\\src\\components\\EditorItems.js",[],"D:\\project\\codebit\\src\\components\\Admin.js",[],"D:\\project\\codebit\\src\\components\\Explore.js",["70"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport styles from \"./Explore.module.css\";\r\nconst Explore = () => {\r\n   const { topicTag } = useParams();\r\n   const [problems, setProblems] = useState([]);\r\n   const history = useHistory();\r\n   useEffect(() => {\r\n      fetch(`http://localhost:9999/getProblemSet/${topicTag}`, {\r\n         method: \"POST\",\r\n         credentials: \"include\",\r\n      })\r\n         .then((r) => {\r\n            return r.json();\r\n         })\r\n         .then((r) => {\r\n            setProblems(r);\r\n         });\r\n   }, []);\r\n\r\n   return (\r\n      <div className={styles.container}>\r\n         <div className={styles.btn}>\r\n            <Button\r\n               color=\"link\"\r\n               onClick={() => {\r\n                  history.goBack();\r\n               }}\r\n            >\r\n               back\r\n            </Button>\r\n         </div>\r\n         {/* --------------problem div */}\r\n         <div className={styles.header}>\r\n            <h6 className={styles.subheader}>Tag : {topicTag}</h6>\r\n         </div>\r\n         {problems.map((arr, index) => {\r\n            return (\r\n               <div className={styles.problemDiv} key={arr[\"questionKey\"]}>\r\n                  <div className={styles.h7}>\r\n                     <h6 style={{ color: \"green\" }}>Problem : {index + 1}</h6>\r\n                     <p>Level : {arr[\"problemLevel\"]}</p>\r\n                  </div>\r\n                  <div className={styles.h7}>\r\n                     <h6>{arr[\"problemHead\"]}</h6>\r\n                     <p>Point : {arr[\"point\"]}</p>\r\n                  </div>\r\n                  <p>{arr[\"problem\"]}</p>\r\n\r\n                  <Button\r\n                     size=\"sm\"\r\n                     color=\"primary\"\r\n                     className={styles.problemBtn}\r\n                     onClick={() => {\r\n                        history.push(\r\n                           `/problem/${arr[\"questionKey\"]}/${arr[\"topicTag\"]}/${arr[\"problemHead\"]}`\r\n                        );\r\n                     }}\r\n                  >\r\n                     start\r\n                  </Button>\r\n\r\n                  <hr />\r\n               </div>\r\n            );\r\n         })}\r\n      </div>\r\n   );\r\n};\r\nexport default Explore;\r\n","D:\\project\\codebit\\src\\components\\SeperateEditor.js",[],"D:\\project\\codebit\\src\\components\\Signup.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":90,"column":7,"nodeType":"77","endLine":90,"endColumn":9,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":373,"column":7,"nodeType":"77","endLine":373,"endColumn":9,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":93,"column":7,"nodeType":"77","endLine":93,"endColumn":9,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"83","line":21,"column":7,"nodeType":"77","endLine":21,"endColumn":9,"suggestions":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'key' and 'topic'. Either include them or remove the dependency array.","ArrayExpression",["87"],"React Hook useEffect has a missing dependency: 'key'. Either include it or remove the dependency array.",["88"],"React Hook useEffect has a missing dependency: 'skip'. Either include it or remove the dependency array.",["89"],"React Hook useEffect has a missing dependency: 'topicTag'. Either include it or remove the dependency array.",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [key, topic]",{"range":"99","text":"100"},"Update the dependencies array to be: [key]",{"range":"101","text":"102"},"Update the dependencies array to be: [skip]",{"range":"103","text":"104"},"Update the dependencies array to be: [topicTag]",{"range":"105","text":"106"},[2819,2821],"[key, topic]",[11507,11509],"[key]",[2722,2724],"[skip]",[643,645],"[topicTag]"]