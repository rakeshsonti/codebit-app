[{"D:\\project\\codebit\\src\\index.js":"1","D:\\project\\codebit\\src\\App.js":"2","D:\\project\\codebit\\src\\reportWebVitals.js":"3","D:\\project\\codebit\\src\\components\\Login.js":"4","D:\\project\\codebit\\src\\components\\Signup.js":"5","D:\\project\\codebit\\src\\components\\DashBoard.js":"6","D:\\project\\codebit\\src\\components\\Ask.js":"7","D:\\project\\codebit\\src\\components\\Home.js":"8","D:\\project\\codebit\\src\\components\\Logout.js":"9","D:\\project\\codebit\\src\\components\\NewPanel.js":"10","D:\\project\\codebit\\src\\components\\LeaderBoard.js":"11","D:\\project\\codebit\\src\\components\\Profile.js":"12","D:\\project\\codebit\\src\\components\\CodeEditor.js":"13","D:\\project\\codebit\\src\\components\\EditorItems.js":"14","D:\\project\\codebit\\src\\components\\Admin.js":"15","D:\\project\\codebit\\src\\components\\Explore.js":"16"},{"size":551,"mtime":1609335387991,"results":"17","hashOfConfig":"18"},{"size":3925,"mtime":1609579545593,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":1963,"mtime":1609431277003,"results":"21","hashOfConfig":"18"},{"size":2424,"mtime":1609432345253,"results":"22","hashOfConfig":"18"},{"size":5347,"mtime":1609612924217,"results":"23","hashOfConfig":"18"},{"size":129,"mtime":1609335483018,"results":"24","hashOfConfig":"18"},{"size":6191,"mtime":1609613332039,"results":"25","hashOfConfig":"18"},{"size":110,"mtime":1609337135245,"results":"26","hashOfConfig":"18"},{"size":22880,"mtime":1609673493841,"results":"27","hashOfConfig":"18"},{"size":125,"mtime":1609322538634,"results":"28","hashOfConfig":"18"},{"size":147,"mtime":1609337144530,"results":"29","hashOfConfig":"18"},{"size":2260,"mtime":1609409582421,"results":"30","hashOfConfig":"18"},{"size":1120,"mtime":1609651359033,"results":"31","hashOfConfig":"18"},{"size":9087,"mtime":1609588509278,"results":"32","hashOfConfig":"18"},{"size":2386,"mtime":1609652372912,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"zxdbgk",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\project\\codebit\\src\\index.js",[],["72","73"],"D:\\project\\codebit\\src\\App.js",["74"],"import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport DashBoard from \"./components/DashBoard\";\nfunction App() {\n   const [isLoggIn, setLoggIn] = useState(false);\n   const [isSigninOrLogin, setIsSigninOrLogin] = useState(true);\n   const [loginError, setLoginError] = useState(undefined);\n   const [signupError, setSignupError] = useState(undefined);\n   const [userName, setUserName] = useState(undefined);\n   const getUserName = () => {\n      fetch(\"http://localhost:9999/userinfo\", { credentials: \"include\" })\n         .then((r) => {\n            if (r.ok) {\n               return r.json();\n            } else {\n               setLoggIn(false);\n               setUserName(undefined);\n               return {\n                  success: false,\n               };\n            }\n         })\n         .then((r) => {\n            if (r.success !== false) {\n               setLoggIn(true);\n               setUserName(r.email);\n            }\n         });\n   };\n   useEffect(() => {\n      getUserName();\n   }, []);\n   const LoginHandler = (email, password) => {\n      fetch(\"http://localhost:9999/login\", {\n         method: \"POST\",\n         body: JSON.stringify({ email, password }),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: \"include\",\n      })\n         .then((r) => {\n            //r.ok() is response between 200 to <300 then true otherwise if greater than 300 so false\n            if (r.ok) {\n               return {\n                  success: true,\n               };\n            } else {\n               return r.json();\n            }\n         })\n         .then((r) => {\n            if (r.success === true) {\n               setLoggIn(true);\n               setLoginError(\"\");\n               return getUserName();\n            } else {\n               // setLoggIn(false);\n               setLoginError(r.err);\n            }\n         })\n         .catch((e) => {\n            console.log(e);\n            setLoginError(\"error\");\n         });\n   };\n   const showHandler = () => {\n      setIsSigninOrLogin(!isSigninOrLogin);\n   };\n   const SignupHandler = (name, email, password) => {\n      fetch(\"http://localhost:9999/signup\", {\n         method: \"POST\",\n         body: JSON.stringify({ email, password, name }),\n         headers: {\n            \"Content-Type\": \"application/json\",\n         },\n         credentials: \"include\",\n      })\n         .then((r) => {\n            //r.ok() is response between 200 to <300 then true otherwise if greater than 300 so false\n            if (r.ok) {\n               return {\n                  success: true,\n               };\n            } else {\n               return r.json();\n            }\n         })\n         .then((r) => {\n            if (r.success === true) {\n               setSignupError(\"\");\n               setIsSigninOrLogin(true);\n            } else {\n               setSignupError(r.err);\n            }\n         })\n         .catch((e) => {\n            console.error(e);\n            setSignupError(e);\n         });\n   };\n   const logoutHandler = () => {\n      return fetch(\"http://localhost:9999/logout\", {\n         method: \"GET\",\n         credentials: \"include\",\n      }).then((r) => {\n         if (r.ok) {\n            setLoggIn(false);\n            setUserName(undefined);\n         }\n      });\n   };\n   return (\n      <div className=\"App\">\n         {isLoggIn ? (\n            <DashBoard logoutHandler={logoutHandler} />\n         ) : isSigninOrLogin ? (\n            <Login\n               LoginHandler={LoginHandler}\n               error={loginError}\n               showHandler={showHandler}\n            />\n         ) : (\n            <Signup\n               SignupHandler={SignupHandler}\n               error={signupError}\n               showHandler={showHandler}\n            />\n         )}\n      </div>\n   );\n}\n\nexport default App;\n","D:\\project\\codebit\\src\\reportWebVitals.js",[],"D:\\project\\codebit\\src\\components\\Login.js",["75"],"import React, { useState } from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input, FormText } from \"reactstrap\";\r\n\r\nimport styles from \"./Login.module.css\";\r\nconst Login = (props) => {\r\n   const [email, setEmail] = useState();\r\n   const [password, setPassword] = useState();\r\n   const onChangeEmail = (e) => {\r\n      setEmail(e.target.value);\r\n   };\r\n   const onChangePassword = (e) => {\r\n      setPassword(e.target.value);\r\n   };\r\n\r\n   const localHandler = (e) => {\r\n      e.preventDefault();\r\n      props.LoginHandler(email, password);\r\n   };\r\n   return (\r\n      <div className={styles.container}>\r\n         <Form className={styles.formBackground} onSubmit={localHandler}>\r\n            <FormGroup>\r\n               <Label for=\"Email\">Email</Label>\r\n               <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"emailId\"\r\n                  placeholder=\"Enter your Email\"\r\n                  onChange={onChangeEmail}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <Label for=\"Password\">Password</Label>\r\n               <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"examplePassword\"\r\n                  placeholder=\"Enter your password\"\r\n                  onChange={onChangePassword}\r\n                  required\r\n               />\r\n            </FormGroup>\r\n            <FormGroup>\r\n               <p className={styles.error}>{props.error}</p>\r\n            </FormGroup>\r\n            <Button className={styles.button} type=\"submit\">\r\n               login\r\n            </Button>{\" \"}\r\n            <FormGroup className={styles.smallBtn}>\r\n               create an account?\r\n               <Button color=\"link\" size=\"sm\" onClick={props.showHandler}>\r\n                  sign up\r\n               </Button>\r\n            </FormGroup>\r\n         </Form>\r\n      </div>\r\n   );\r\n};\r\nexport default Login;\r\n","D:\\project\\codebit\\src\\components\\Signup.js",[],"D:\\project\\codebit\\src\\components\\DashBoard.js",["76"],"import React, { useState } from \"react\";\r\nimport styles from \"./DashBoard.module.css\";\r\nimport {\r\n   Collapse,\r\n   NavbarToggler,\r\n   NavbarBrand,\r\n   Navbar,\r\n   Nav,\r\n   NavItem,\r\n   Button,\r\n} from \"reactstrap\";\r\nimport {\r\n   BrowserRouter as Router,\r\n   Route,\r\n   NavLink,\r\n   useHistory,\r\n} from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport Ask from \"./Ask\";\r\nimport LeaderBoard from \"./LeaderBoard\";\r\nimport NewPanel from \"./NewPanel\";\r\nimport Profile from \"./Profile\";\r\nimport Explore from \"./Explore\";\r\nimport Admin from \"./Admin\";\r\nfunction DashBoard(props) {\r\n   const [isOpen, setIsOpen] = useState(false);\r\n   const toggle = () => {\r\n      setIsOpen(!isOpen);\r\n   };\r\n\r\n   return (\r\n      <div>\r\n         <Router>\r\n            <Navbar\r\n               color=\"dark\"\r\n               dark\r\n               expand=\"sm\"\r\n               className={styles.navbarstyle}\r\n            >\r\n               <NavbarBrand href=\"/\">CodeBit</NavbarBrand>\r\n               <NavbarToggler onClick={toggle} />\r\n               <Collapse isOpen={isOpen} navbar>\r\n                  <Nav>\r\n                     <NavItem>\r\n                        <NavLink to=\"/\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Practice\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n\r\n                     <NavItem>\r\n                        <NavLink to=\"/leaderboard\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Leaderboard\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <NavLink to=\"/newpanel\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              New Panel\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <NavLink to=\"/ask\">\r\n                           <Button\r\n                              outline\r\n                              color=\"warning\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Ask ?\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <NavLink to=\"/profile\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Profile\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <Button\r\n                           outline\r\n                           color=\"danger\"\r\n                           size=\"sm\"\r\n                           className={styles.navitem}\r\n                           onClick={props.logoutHandler}\r\n                        >\r\n                           Log out\r\n                        </Button>\r\n                     </NavItem>\r\n                     <NavItem>\r\n                        <NavLink to=\"/admin\">\r\n                           <Button\r\n                              outline\r\n                              color=\"success\"\r\n                              size=\"sm\"\r\n                              className={styles.navitem}\r\n                           >\r\n                              Admin\r\n                           </Button>\r\n                        </NavLink>\r\n                     </NavItem>\r\n                  </Nav>\r\n               </Collapse>\r\n            </Navbar>\r\n            {/* <Switch> */}\r\n            <Route exact path=\"/\">\r\n               <Home />\r\n            </Route>\r\n\r\n            <Route exact path=\"/leaderboard\">\r\n               <LeaderBoard />\r\n            </Route>\r\n            <Route exact path=\"/newpanel\">\r\n               <NewPanel />\r\n            </Route>\r\n            <Route exact path=\"/ask\">\r\n               <Ask />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n               <Profile />\r\n            </Route>\r\n            <Route exact path=\"/admin\">\r\n               <Admin />\r\n            </Route>\r\n            <Route exact path=\"/explore/:topicTag\">\r\n               <Explore />\r\n            </Route>\r\n            <Route path=\"/problem/:key/:topic/:name\">\r\n               <NewPanel />\r\n            </Route>\r\n\r\n            {/* </Switch> */}\r\n         </Router>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default DashBoard;\r\n","D:\\project\\codebit\\src\\components\\Ask.js",[],"D:\\project\\codebit\\src\\components\\Home.js",["77","78","79","80"],"import React from \"react\";\r\nimport styles from \"./Home.module.css\";\r\nimport Array from \"../images/array.PNG\";\r\nimport LinkedList from \"../images/linkedlist.PNG\";\r\nimport Stack from \"../images/stack.PNG\";\r\nimport Queue from \"../images/queue.PNG\";\r\nimport Tree from \"../images/tree.PNG\";\r\nimport Heap from \"../images/heap.PNG\";\r\nimport Matrix from \"../images/matrix.PNG\";\r\nimport Graph from \"../images/graph.PNG\";\r\nimport Searching from \"../images/searching.PNG\";\r\nimport Sorting from \"../images/sorting.PNG\";\r\nimport Recursion from \"../images/recursion.PNG\";\r\nimport Hashing from \"../images/hashing.PNG\";\r\nimport Explore from \"./Explore\";\r\nimport { Card, Button, CardImg, CardFooter } from \"reactstrap\";\r\nimport {\r\n   BrowserRouter as Router,\r\n   Switch,\r\n   Route,\r\n   Link,\r\n   Redirect,\r\n   useHistory,\r\n} from \"react-router-dom\";\r\n\r\nconst Home = (props) => {\r\n   let history = useHistory();\r\n   console.log(\"history \", history);\r\n   const handlerClick = (tag) => {\r\n      const str = `/explore/${tag}`;\r\n      history.push(str);\r\n   };\r\n   return (\r\n      <div className={styles.container}>\r\n         <h4 className={styles.head3}>Data Structure & Algorithms</h4>\r\n         <hr />\r\n         <Router>\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Array} alt=\"array img\" />\r\n                  <CardFooter>\r\n                     <Link to=\"/explore/array\">\r\n                        <Button\r\n                           variant=\"outline-dark\"\r\n                           size=\"sm\"\r\n                           onClick={() => {\r\n                              handlerClick(\"array\");\r\n                           }}\r\n                        >\r\n                           array\r\n                        </Button>\r\n                     </Link>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={LinkedList} alt=\"linkedlist img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        linkedlist\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Stack} alt=\"stack img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        stack\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n            {/* //--------------------------------------------------------- */}\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Queue} alt=\"queue img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        queue\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Tree} alt=\"tree img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        tree\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Heap} alt=\"heap img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        heap\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n\r\n            {/* //---------------------------------------------- */}\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Matrix} alt=\"Matrix img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        matrix\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Graph} alt=\"Graph img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        graph\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Searching} alt=\"Searching img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        searching\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n\r\n            {/* //---------------------------------------------- */}\r\n            <div className={styles.subcontainer}>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Sorting} alt=\"Sorting img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        sorting\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Recursion} alt=\"Recursion img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        recursion\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n               <Card className={styles.card}>\r\n                  <CardImg top src={Hashing} alt=\"Hashing img\" />\r\n                  <CardFooter>\r\n                     <Button variant=\"outline-dark\" size=\"sm\">\r\n                        hashing\r\n                     </Button>\r\n                  </CardFooter>\r\n               </Card>\r\n            </div>\r\n            <br />\r\n\r\n            {/* //---------------------------------------------- */}\r\n         </Router>\r\n      </div>\r\n   );\r\n};\r\nexport default Home;\r\n","D:\\project\\codebit\\src\\components\\Logout.js",[],["81","82"],"D:\\project\\codebit\\src\\components\\NewPanel.js",["83","84","85","86"],"D:\\project\\codebit\\src\\components\\LeaderBoard.js",[],"D:\\project\\codebit\\src\\components\\Profile.js",[],"D:\\project\\codebit\\src\\components\\CodeEditor.js",[],"D:\\project\\codebit\\src\\components\\EditorItems.js",[],"D:\\project\\codebit\\src\\components\\Admin.js",[],"D:\\project\\codebit\\src\\components\\Explore.js",["87","88"],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":11,"column":11,"nodeType":"95","messageId":"96","endLine":11,"endColumn":19},{"ruleId":"93","severity":1,"message":"97","line":2,"column":49,"nodeType":"95","messageId":"96","endLine":2,"endColumn":57},{"ruleId":"93","severity":1,"message":"98","line":16,"column":4,"nodeType":"95","messageId":"96","endLine":16,"endColumn":14},{"ruleId":"93","severity":1,"message":"99","line":15,"column":8,"nodeType":"95","messageId":"96","endLine":15,"endColumn":15},{"ruleId":"93","severity":1,"message":"100","line":19,"column":4,"nodeType":"95","messageId":"96","endLine":19,"endColumn":10},{"ruleId":"93","severity":1,"message":"101","line":20,"column":4,"nodeType":"95","messageId":"96","endLine":20,"endColumn":9},{"ruleId":"93","severity":1,"message":"102","line":22,"column":4,"nodeType":"95","messageId":"96","endLine":22,"endColumn":12},{"ruleId":"89","replacedBy":"103"},{"ruleId":"91","replacedBy":"104"},{"ruleId":"93","severity":1,"message":"105","line":28,"column":8,"nodeType":"95","messageId":"96","endLine":28,"endColumn":23},{"ruleId":"93","severity":1,"message":"106","line":57,"column":13,"nodeType":"95","messageId":"96","endLine":57,"endColumn":21},{"ruleId":"107","severity":1,"message":"108","line":57,"column":24,"nodeType":"109","endLine":57,"endColumn":30},{"ruleId":"107","severity":1,"message":"110","line":357,"column":7,"nodeType":"109","endLine":357,"endColumn":9,"suggestions":"111"},{"ruleId":"93","severity":1,"message":"112","line":1,"column":38,"nodeType":"95","messageId":"96","endLine":1,"endColumn":44},{"ruleId":"107","severity":1,"message":"113","line":22,"column":7,"nodeType":"109","endLine":22,"endColumn":9,"suggestions":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'userName' is assigned a value but never used.","Identifier","unusedVar","'FormText' is defined but never used.","'useHistory' is defined but never used.","'Explore' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.",["115"],["116"],"'initialLoadData' is assigned a value but never used.","'problems' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'problems' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","React Hook useEffect has a missing dependency: 'key'. Either include it or remove the dependency array.",["117"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'topicTag'. Either include them or remove the dependency array.",["118"],"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [key]",{"range":"123","text":"124"},"Update the dependencies array to be: [history, topicTag]",{"range":"125","text":"126"},[11281,11283],"[key]",[693,695],"[history, topicTag]"]